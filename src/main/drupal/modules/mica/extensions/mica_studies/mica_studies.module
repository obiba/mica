<?php

/**
 * @file
 * Code for the mica_studies feature.
 */

require_once('mica_studies.features.inc');
require_once('mica_studies.population.inc');
require_once('mica_studies.data_collection_event.inc');
require_once('mica_studies.study.inc');
require_once('mica_studies.migrate.inc');

/**
 * Implements hook_menu().
 */
function mica_studies_menu() {
  $items = array();
  $items['export'] = array(
    'title' => 'Export',
    'page callback' => 'mica_studies_export_page',
    'access callback' => 'mica_studies_export_page_access',
    'file' => 'mica_studies.pages.inc',
  );
  $items['admin/config/development/mica_studies'] = array(
    'title' => 'Mica Studies',
    'description' => 'Devel tools for Mica Studies',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mica_studies_devel_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'mica_studies.devel.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mica_studies_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();

  switch ($root_path) {

    case 'node/%':
      $node = $router_item['map']['1'];
      switch ($node->type) {
        case 'study':
          if (node_access('update', $node)) {
            if (node_access('create', 'population')) {
              $links['add-population'] = array(
                '#theme' => 'menu_local_action',
                '#weight' => -30,
                '#link' => array(
                  'title' => t('Add new Population'),
                  'href' => 'node/add/population',
                  'localized_options' => array(
                    'query' => array(
                      'study' => $node->nid,
                      'destination' => 'node/' . $node->nid,
                    )
                  ),
                ),
              );
            }
            if (node_access('create', 'data_collection_event')) {
              $links['add-data-collection-event'] = array(
                '#theme' => 'menu_local_action',
                '#link' => array(
                  'title' => t('Add new Data Collection Event'),
                  'href' => 'node/add/data-collection-event',
                  'localized_options' => array(
                    'query' => array(
                      'study' => $node->nid,
                      'destination' => 'node/' . $node->nid,
                    )
                  ),
                ),
              );
            }
          }
          // If study has has variables
          if (_mica_studies_has_variables($node->nid)) {
            // variables
            $links['view-variable'] = array(
              '#weight' => 30,
              '#theme' => 'menu_local_action',
              '#link' => array(
                'title' => t('Variables'),
                'href' => 'variable-search',
                'localized_options' => array(
                  'query' => array(
                    'f[0]' => 'search_api_combined_1:' . $node->nid
                  ),
                  'attributes' => array(
                    'class' => 'highlight',
                  ),
                ),
              ),
            );
          }
          break;
        case 'population':
          $wraper = entity_metadata_wrapper('node', $node);
          $wrapper_id = $wraper->field_pop_study;
          if (node_access('create', 'data_collection_event')) {
            $links['add-data-collection-event'] = array(
              '#theme' => 'menu_local_action',
              '#link' => array(
                'title' => t('Add new Data Collection Event'),
                'href' => 'node/add/data-collection-event',
                'localized_options' => array(
                  'query' => array(
                    'population' => $node->nid,
                    'destination' => 'node/' . $wrapper_id->getIdentifier(),
                  )
                ),
              ),
            );
          }
          break;
      }
      break;

    case 'studies':

      $node_type = node_type_load('study');
      if (node_access('create', 'study')) {
        $links['add-study'] = array(
          '#theme' => 'menu_local_action',
          '#link' => array(
            'title' => t('Add new Study'),
            'href' => 'node/add/study',
          ),
        );

      }
      $links['search-studies'] = array(
        '#weight' => 30,
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Search Studies'),
          'href' => 'studies-search',
          'localized_options' => array(
            'attributes' => array(
              'class' => 'highlight',
            ),
          ),
        ),
      );
      break;

    case 'documents':
      if (node_access('create', 'documents')) {
        $links['add-documents'] = array(
          '#theme' => 'menu_local_action',
          '#link' => array(
            'title' => t('Add some Documents'),
            'href' => 'node/add/documents',
          ),
        );
      }
      break;
  }

  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}

function _mica_studies_has_variables($study_nid) {
  $nb_variables = db_query('SELECT field_study_study_variable_att_nid FROM {field_data_field_study_study_variable_att}
    WHERE entity_id = :study_nid LIMIT 1',
    array(':study_nid' => $study_nid))->rowCount();

$study_wrapper = entity_metadata_wrapper('node', $study_nid);
foreach($study_wrapper->mica_dataset->getIterator() as $datasets){
  if(!empty($datasets->field_dataset_variables)){
    return TRUE;
  }
}

  return $nb_variables == 1;
}

/**
 * Implements feeds_permission().
 */
function mica_studies_permission() {
  $perms = array(
    'export data' => array(
      'title' => t('Export Data'),
      'description' => t('Allow exportation of data.')
    ),
  );
  return $perms;
}

/**
 * Menu access callback.
 */
function mica_studies_export_page_access() {
  return user_access('export data');
}

/**
 * Implements hook_node_insert()
 */
function mica_studies_node_insert($node) {
  switch ($node->type) {
    case 'study':
      mica_core_create_node_default_menu($node, TRUE, FALSE, 0, 'studies');
      break;
  }
}

/**
 * Implements hook_node_update()
 */
function mica_studies_node_update($node) {
  switch ($node->type) {
    case 'study':
    case 'population':
    case 'data_collection_event':
      cache_clear_all(); // clear blocks cache
      break;
  }
}

/**
 * Implements hook_node_view()
 */
function mica_studies_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'study':
      $study_wrapper = entity_metadata_wrapper('node', $node->nid);
      $study_acronym = $study_wrapper->field_acroym->value();
     if(!empty($study_acronym)){
       drupal_set_title($study_wrapper->title_field->value() . ' (' . $study_acronym . ')', CHECK_PLAIN);
     }
      ctools_add_css('mica_studies', 'mica_studies');
      break;
    case 'population':
      if ($view_mode === 'full') {
        ctools_add_css('mica_studies', 'mica_studies');
        _mica_studies_population_view($node, $view_mode, $langcode);
      }
      break;
    case 'data_collection_event':
      if ($view_mode === 'full') {
        ctools_add_css('mica_studies', 'mica_studies');
        _mica_studies_dce_view($node, $view_mode, $langcode);
      }
      break;
    case 'contact':
      _mica_studies_contact_view($node, $view_mode, $langcode);
      break;
  }
}

function _mica_studies_contact_view($node, $view_mode, $langcode) {
  $wrapper = entity_metadata_wrapper('node', $node->nid);

  // Fix until http://drupal.org/node/1376126 is resolved
  if ($node->translate == 1) {
    $wrapper->language->set($langcode);
  }

  $address_lines = array();
  $address_lines[] = $wrapper->field_institution_name->value();
  $address_lines[] = $wrapper->field_department_unit->value();
  $address_lines[] = $wrapper->field_address->value();

  $address_parts = array();
  $address_parts[] = $wrapper->field_city->value();
  $address_parts[] = $wrapper->field_state->value();
  $address_parts[] = $wrapper->field_postal_code->value();

  $address_lines[] = implode(', ', array_filter($address_parts));
  $address_lines[] = $wrapper->field_contact_country->label();

  $full_address = implode('<br>', array_filter($address_lines));

  // add title in case of null field_address
  if (!isset($node->content['field_address']['#title'])) {
    $node->content['field_address']['#title'] = t('Address');
    $node->content['field_address']['#weight'] = 0;
    $node->content['field_address']['#theme'] = 'field';
    $node->content['field_address']['#access'] = TRUE;
    $node->content['field_address']['#label_display'] = 'above';
    $node->content['field_address']['#view_mode'] = 'full';
    $node->content['field_address']['#language'] = $langcode;
    $node->content['field_address']['#field_name'] = 'field_address';
    $node->content['field_address']['#field_type'] = 'text';
    $node->content['field_address']['#field_translatable'] = 1;
    $node->content['field_address']['#entity_type'] = 'node';
    $node->content['field_address']['#bundle'] = 'contact';
    $node->content['field_address']['#object'] = $node;
    $node->content['field_address']['#formatter'] = 'text_default';
    $node->content['field_address']['#items'] = array(
      array(
        'value' => $full_address,
        'safe_value' => $full_address,
        'format' => NULL,
      )
    );
  }
  else {
    $institution = $wrapper->field_institution_name->value();
    if (!empty($institution)) {
      $node->content['field_address']['#title'] = t('Address'); //$wrapper->field_contact_name->value() . ' (' . $wrapper->field_institution_name->value() . ')';
    }
  }
  $node->content['field_address'][0]['#markup'] = $full_address;

  $node->content['field_daco']['#access'] = $wrapper->field_daco->value();
}

/**
 * Implements hook_form_alter
 * To add dependent fields when filling out the form
 */
function mica_studies_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'study_node_form':
      _mica_studies_study_form_alter($form, $form_state, $form_id);
      break;
    case 'population_node_form':
      _mica_studies_population_form_alter($form, $form_state, $form_id);
      break;
    case 'data_collection_event_node_form':
      _mica_studies_data_collection_event_form_alter($form, $form_state, $form_id);
      break;
  }
}

function _mica_studies_study_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_mica_studies_form_validate';

  // hide list of population
  $form['field_study_populations']['#type'] = 'hidden';

  // hide list of datasets
  $form['mica_dataset']['#type'] = 'hidden';

  _mica_add_dependent_field_checked($form, 'field_design', 'field_design_other_sp', 'other');
  _mica_add_dependent_field_checked($form, 'field_recruitment', 'field_recruitment_other_sp', 'other');
  _mica_add_dependent_field_checked($form, 'field_access_other', 'field_access_other_sp', '1');

  $form['actions']['_mica_studies_save_add_population_submit'] = array(
    '#access' => TRUE,
    '#value' => t('Save & Add Population'),
    '#weight' => 6,
    '#type' => 'submit',
    '#submit' => array('node_form_submit', '_mica_studies_save_add_population_submit'),
  );
}

function _mica_studies_save_add_population_submit($form, &$form_state) {
  if (isset($form['actions']['_mica_studies_save_add_population_submit'])) {
    $form_state['redirect'] = array(
      'node/add/population',
      array(
        'query' => array(
          'study' => $form_state['nid'],
        ),
      ),
    );
    $form_state['nid'] = NULL;
  }
}

function _mica_studies_population_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_mica_populations_form_validate';

  // Prepopulate study node reference in population edit form and hide it
  if (isset($_REQUEST['study'])) {
    $lang = $form['field_pop_study']['#language'];
    $form['field_pop_study'][$lang]['#after_build'][] = '_mica_studies_prepopulate_study_after_build';
    $form['field_pop_study']['#type'] = 'hidden';
  }

  $form['actions']['submit']['#type'] = 'hidden';

  // Override save button
  $form['actions']['_mica_studies_save_population_submit'] = array(
    '#access' => TRUE,
    '#value' => t('Save'),
    '#weight' => -10,
    '#type' => 'submit',
    '#submit' => array('node_form_submit', '_mica_studies_save_population_submit'),
  );

  $form['actions']['_mica_studies_save_add_dce_submit'] = array(
    '#access' => TRUE,
    '#value' => t('Save & Add Collection Event'),
    '#weight' => 6,
    '#type' => 'submit',
    '#submit' => array('node_form_submit', '_mica_studies_save_add_dce_submit'),
  );

  //Population edition - hide DCE if empty
  $lang = $form['field_pop_dce']['#language'];
  $field_dce = $form['field_pop_dce'][$lang]['#options'];
  if (empty($field_dce)) {
    $form['field_pop_dce']['#type'] = 'hidden';
  }

  //population
  _mica_add_dependent_field_checked($form, 'field_pop_src_recruit', 'field_pop_general_pop_recruit', 'general');
  _mica_add_dependent_field_checked($form, 'field_pop_src_recruit', 'field_pop_exist_study_part', 'exist_studies');
  _mica_add_dependent_field_checked($form, 'field_pop_src_recruit', 'field_pop_specific_pop', 'specific_population');
  _mica_add_dependent_field_checked($form, 'field_pop_specific_pop', 'field_pop_specific_pop_other_sp', 'other');
  _mica_add_dependent_field_checked($form, 'field_pop_src_recruit', 'field_pop_recruitment_other', 'other');

}

/**
 * Redirect to Study view after population edition
 */
function _mica_studies_save_population_submit($form, &$form_state) {
  $wrapper = entity_metadata_wrapper('node', $form_state['nid']);
  $form_state['redirect'] = 'node/' . $wrapper->field_pop_study->getIdentifier();
}

/**
 * Redirects to the study edit page when clicking on a button from the Population edit form or DCE edit form.
 */
function _mica_studies_save_edit_study_submit($form, &$form_state) {
  if (isset($form['actions']['_mica_studies_save_edit_study_submit']) && isset($form['field_pop_study'])) {
    //node_reference_autocomplete_value($form_element[0]['nid'], FALSE, NULL);
    $lang = $form['field_pop_study']['#language'];
    $form_state['redirect'] = 'node/' . $form['#node']->field_pop_study[$lang][0]['nid'] . '/edit';
    $form_state['nid'] = NULL;
  }
  else if (isset($form['actions']['_mica_studies_save_edit_study_submit']) && isset($form['field_dce_population'])) {
    // get the study id from the popuation id
    $lang = $form['field_dce_population']['#language'];
    $pop = node_load($form['#node']->field_dce_population[$lang][0]['nid']);
    $wrapper = entity_metadata_wrapper('node', $pop);
    $form_state['redirect'] = 'node/' . $wrapper->field_pop_study->value()->nid . '/edit';
    $form_state['nid'] = NULL;
  }
}

function _mica_studies_prepopulate_study_after_build(&$form_element) {
  if (isset($_REQUEST['study'])) {
    $form_element[0]['nid']['#default_value'] = $_REQUEST['study'];
    $form_element[0]['nid']['#value'] = node_reference_autocomplete_value($form_element[0]['nid'], FALSE, NULL);
  }
  return $form_element;
}

function _mica_studies_save_add_dce_submit($form, &$form_state) {
  if (isset($form['actions']['_mica_studies_save_add_dce_submit'])) {
    $form_state['redirect'] = array(
      'node/add/data-collection-event',
      array(
        'query' => array(
          'population' => $form_state['nid'],
        ),
      ),
    );
    $form_state['nid'] = NULL;
  }
}

function _mica_studies_data_collection_event_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_mica_data_collection_event_form_validate';

  // Prepopulate study node reference in population edit form and hide it
  if (isset($_REQUEST['population'])) {
    $lang = $form['field_dce_population']['#language'];
   // $form['field_dce_population'][$lang]['#after_build'][] = '_mica_studies_prepopulate_dce_after_build';
    $form['field_dce_population'][$lang]['#default_value'][0] = $_REQUEST['population'];
  }
  $form['actions']['submit']['#type'] = 'hidden';

  // Override save button
  $form['actions']['_mica_studies_save_population_submit'] = array(
    '#access' => TRUE,
    '#value' => t('Save'),
    '#weight' => -10,
    '#type' => 'submit',
    '#submit' => array('node_form_submit', '_mica_studies_save_dce_submit'),
  );

  //dce
  _mica_add_dependent_field_checked($form, 'field_dce_data_sources', 'field_dce_bio_samples_management', 'biological_samples');
  _mica_add_dependent_field_checked($form, 'field_dce_data_sources', 'field_dce_data_sources_admin_db', 'administratives_databases');
  _mica_add_dependent_field_checked($form, 'field_dce_data_sources', 'field_dce_data_sources_sp', 'others');

  _mica_add_double_dependent_field_checked($form, 'field_dce_data_sources', 'field_dce_bio_samples_management', 'field_dce_tissues_sp', 'biological_samples', 'tissues');
  _mica_add_double_dependent_field_checked($form, 'field_dce_data_sources', 'field_dce_bio_samples_management', 'field_dce_samples_man_other_sp', 'biological_samples', 'others');
}

/**
 * Redirect to Study view after DCE edition
 */
function _mica_studies_save_dce_submit($form, &$form_state) {
  $form_state['redirect'] = 'node/' . _mica_studies_get_dce_study_nid($form_state['nid']);
}

/**
 * Redirects to the population edit page when clicking on a button from the DCE edit form.
 */
function _mica_studies_save_edit_population_submit($form, &$form_state) {
  if (isset($form['actions']['_mica_studies_save_edit_population_submit'])) {
    $lang = $form['field_dce_population']['#language'];
    $form_state['redirect'] = 'node/' . $form['#node']->field_dce_population[$lang][0]['nid'] . '/edit';
    $form_state['nid'] = NULL;
  }
}

function _mica_studies_prepopulate_dce_after_build(&$form_element) {
  if (isset($_REQUEST['population'])) {
    $form_element[0]['nid']['#default_value'] = $_REQUEST['population'];
    $form_element[0]['nid']['#value'] = node_reference_autocomplete_value($form_element[0]['nid'], FALSE, NULL);
  }
  return $form_element;
}

/**
 * Implement hook_field_group_pre_render
 * Used to show/hide a fieldset based on another field selection
 */
function mica_field_group_pre_render(&$element, $group, &$form) {

  if (isset($form['#form_id']) && $form['#form_id'] === 'study_node_form') {

    $group_name = $group->group_name;
    $lang = key_exists('#default_value', $form['language']) ? $form['language']['#default_value'] : LANGUAGE_NONE;
    $to_hide = array(
      'group_authorising_person' => array(
        'dependee' => 'field_authorization_specific[' . $lang . ']',
        'condition' => 'checked',
        'value' => TRUE,
      ),
      'group_authorising_person_m' => array(
        'dependee' => 'field_authorization_maelstrom[' . $lang . ']',
        'condition' => 'checked',
        'value' => TRUE,
      ),
    );

    if (array_key_exists($group_name, $to_hide)) {
      $element['#states'] = array(
        'visible' => array(
          'input[name="' . $to_hide[$group_name]['dependee'] . '"]' => array(
            $to_hide[$group_name]['condition'] => $to_hide[$group_name]['value']
          ),
        ),
      );
    }
  }
}

function _mica_add_dependent_field_checked(&$form, $dependee, $dependent, $key_selected) {
  if (array_key_exists($dependee, $form) && array_key_exists($dependent, $form)) {
    $lang = $form[$dependee]['#language'];
    $type = $form[$dependee][$lang]['#type'];
    $input = ':input[name="' . $dependee . '[' . $lang . ']';
    $rule = array();
    if ($type != 'radios') {
      $input = $input . '[' . $key_selected . ']';
      $rule['checked'] = TRUE;
    }
    else {
      $rule['value'] = $key_selected;
    }
    $input = $input . '"]';
    $form[$dependent]['#states'] = array(
      'visible' => array(
        $input => $rule,
      ),
    );
  }
  else {
    debug('dependee "' . $dependee . '" or dependent "' . $dependent . '"not found');
  }
}

function _mica_add_double_dependent_field_checked(&$form, $dependee1, $dependee2, $dependent, $key_selected1, $key_selected2) {
  if (array_key_exists($dependee1, $form) && array_key_exists($dependent, $form) && array_key_exists($dependee2, $form)) {
    $lang = $form[$dependee1]['#language'];
    $type = $form[$dependee1][$lang]['#type'];
    $input1 = ':input[name="' . $dependee1 . '[' . $lang . ']';
    $rule1 = array();
    if ($type != 'radios') {
      $input1 = $input1 . '[' . $key_selected1 . ']';
      $rule1['checked'] = TRUE;
    }
    else {
      $rule1['value'] = $key_selected1;
    }

    $lang = $form[$dependee2]['#language'];
    $type = $form[$dependee2][$lang]['#type'];
    $input2 = ':input[name="' . $dependee2 . '[' . $lang . ']';
    $rule2 = array();
    if ($type != 'radios') {
      $input2 = $input2 . '[' . $key_selected2 . ']';
      $rule2['checked'] = TRUE;
    }
    else {
      $rule2['value'] = $key_selected2;
    }

    $input1 = $input1 . '"]';
    $input2 = $input2 . '"]';
    $form[$dependent]['#states'] = array(
      'visible' => array(
        $input1 => $rule1,
        $input2 => $rule2,
      ),
    );
  }
//  else {
//    debug('dependee "' . $dependee1 . '" or dependent "' . $dependent . '"not found');
//  }
}

/**
 * Displays dates as: 'start date' to 'end date' as the start date value.
 * And hide end date.
 */
function _mica_studies_display_status_dates(&$node, $status_dates) {
  $wrapper = entity_metadata_wrapper('node', $node->nid);
  foreach ($status_dates as $start_date => $end_date) {
    $start = $wrapper->$start_date->value();
    $end = $wrapper->$end_date->value();
    if (!empty($start)) {
      if (isset($node->content[$start_date])) {
        $node->content[$start_date][0]['#markup'] = t('From') . ' ' . $node->content[$start_date][0]['#markup'];
      }

      if (!empty($end) && isset($node->content[$end_date])) {
        $node->content[$start_date][0]['#markup'] .= ' ' . t('to') . ' ' . $node->content[$end_date][0]['#markup'];
      }
    }
    $node->content[$end_date]['#access'] = FALSE;
  }
}

/**
 * Clear dependent field if dependee field selection is not checked.
 */
function _mica_studies_form_validate($form, &$form_state) {
  _mica_studies_form_validate_field($form, $form_state, 'field_design', 'field_design_other_sp', 'other');
  _mica_studies_form_validate_field($form, $form_state, 'field_recruitment', 'field_recruitment_other_sp', 'other');
  _mica_studies_form_validate_field($form, $form_state, 'field_access_other', 'field_access_other_sp', '1');
}

function _mica_populations_form_validate($form, &$form_state) {

  //population
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_src_recruit', 'field_pop_general_pop_recruit', 'general');
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_src_recruit', 'field_pop_exist_study_part', 'exist_studies');
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_src_recruit', 'field_pop_specific_pop', 'specific_population');
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_specific_pop', 'field_pop_specific_pop_other_sp', 'other');
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_src_recruit', 'field_pop_recruitment_other', 'other');
}

function _mica_data_collection_event_form_validate($form, &$form_state) {
  //dce
  _mica_studies_form_validate_field($form, $form_state, 'field_dce_data_sources', 'field_dce_bio_samples_management', 'biological_samples');
  _mica_studies_form_validate_field($form, $form_state, 'field_dce_data_sources', 'field_dce_data_sources_admin_db', 'administratives_databases');
  _mica_studies_form_validate_field($form, $form_state, 'field_dce_data_sources', 'field_dce_data_sources_sp', 'others');
  _mica_studies_form_validate_field($form, $form_state, 'field_dce_bio_samples_management', 'field_dce_tissues_sp', 'tissues');
  _mica_studies_form_validate_field($form, $form_state, 'field_dce_bio_samples_management', 'field_dce_samples_man_other_sp', 'others');
}

/**
 * Clear dependent field if dependee field selection is not checked in any language.
 */
function _mica_studies_form_validate_field($form, &$form_state, $dependee, $dependent, $selection) {
  if (array_key_exists($dependee, $form_state['values']) && array_key_exists($dependent, $form_state['values'])) {
    $flangs = array_keys($form_state['values'][$dependee]);
    $flang = $flangs[0];
    $values = array();
    foreach ($form_state['values'][$dependee][$flang] as $value) {
      if (array_key_exists('value', $value)) {
        $values[] = $value['value'];
      }
      else if (array_key_exists('tid', $value)) {
        $values[] = $value['tid'];
      }

    }

    if (in_array($selection, $values) == FALSE) {
      $empty_value = array();
      $lgs = array_keys($form_state['values'][$dependent]);
      foreach ($lgs as $lg) {
        $empty_value[$lg] = array(array('value' => ''));
      }
      form_set_value($form[$dependent], $empty_value, $form_state);
    }
  }
  else {
    debug('dependee "' . $dependee . '" or dependent "' . $dependent . '"not found');
  }
}

/**
 * Implements hook_block_view_alter()
 */
function mica_studies_block_view_alter(&$data, $block) {
  if (!empty($block) && $block->delta === 'study_current_search' && $block->module === 'current_search') {
    _mica_studies_study_current_search($data, $block);
  }
}

function _mica_studies_study_current_search(&$data, $block) {
  if (isset($data['content']['field_group'])) {
    $data['content']['results']['#markup'] .= ' - ' . l(
        t('Clear all criteria') . ' [X]',
        'studies-search',
        array(
          'attributes' => array(
            'rel' => 'nofollow',
            'class' => array('current-search-clear-all'),
          )
        )
      );
    foreach ($data['content']['field_group'] as $field => $field_group) {
      $field_info = field_info_instance('node', $field, 'study');
      if (isset($field_info['display_label']) && strlen(trim($field_info['display_label'])) > 0) {
        $data['content']['field_group'][$field]['title']['#markup'] = '<h4 class="current-search-group-title">'
          . filter_xss(t($field_info['display_label'])) . ':</h4>';
      }
    }
  }
}

/**
 * Implements hook_node_validate()
 */
function mica_studies_node_validate($node, $form, &$form_state) {
  // check study node title is unique
  if (!isset($node->nid) && $node->type === 'study') {
    if (mica_core_node_title_exists($node->type, $node->title)) {
      form_set_error('title', t('Study name \'!title\' is already given.', array('!title' => $node->title)));
    }
  }
}

/**
 * Creates default content after Features successfully installed
 * Implements hook_post_features_rebuild()
 */
function mica_studies_post_features_rebuild() {
  if (!variable_get('mica_studies_features_rebuild_completed', FALSE)) {
    _mica_studies_create_default_content();
    _mica_studies_configure_permissions();
    variable_set('mica_studies_features_rebuild_completed', TRUE);
  }
}

/**
 * Creates default content in mica core installation
 * Implements hook_mica_create_default_menu_module()
 */
function mica_studies_create_default_menu_module() {
  _mica_studies_create_default_content();
}

function _mica_studies_create_default_content() {
  $study_menu = mica_core_create_menu(st('Studies'), 'studies', 'studies', FALSE, FALSE, 5, NULL);
  if (isset($study_menu) && empty($study_menu['exist'])) {
    mica_core_create_menu(st('Search Studies'), 'studies-search', 'studies-search', FALSE, FALSE, 10, 'studies', $study_menu['mlid']);
    mica_core_set_menu_option('study', $study_menu['mlid']);
    mica_core_disable_menu('studies-search');
  }
}

function _mica_studies_configure_permissions() {
  watchdog('mica', 'Configure Studies custom permissions', array(), WATCHDOG_DEBUG);
  mica_core_configure_role_permissions('study reviewer',
    array(
      'menu view unpublished' => TRUE,
    )
  );
  mica_core_configure_role_permissions('study administrator',
    array(
      'menu view unpublished' => TRUE,
    )
  );
}

/**
 * When creating studies via noderefcreate, set the complete name form the title because of auto_node_title
 * Implements hook_noderefcreate_alter()
 */
function mica_studies_noderefcreate_alter(&$newnode, $element, $form_state) {
  switch ($newnode->type) {
    case 'study':
      $wrapper = entity_metadata_wrapper('node', $newnode);
      $wrapper->title_field->set($wrapper->title->value());
      break;
    case 'contact':
      $wrapper = entity_metadata_wrapper('node', $newnode);
      $wrapper->field_contact_name->given->set($wrapper->title->value());
      break;
  }
}

/*
 * Hook hook_translation_exclude_fields()
 */
function mica_studies_translation_exclude_fields() {
  return array(
    'study' => array('mica_opal'),
  );
}

/*
 * Hook hook_node_delete
 */
function  mica_studies_node_delete($node) {
  switch ($node->type) {
    case 'study':
      _mica_studies_study_delete($node);
      break;
    case 'population':
      _mica_studies_population_delete($node);
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function mica_studies_block_info() {
  $pages = "<?php if(arg(0) == 'node' && is_numeric(arg(1)) && ((arg(2) == ''|| arg(2) == 'view' || arg(2) == 'draft'))) return TRUE; ?>";
  return array(
    'study-general-info' => array(
      'info' => t('Study General Information'),
      'weight' => '10',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'study-general-design' => array(
      'info' => t('Study General Design'),
      'weight' => '20',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'study-access' => array(
      'info' => t('Study Access'),
      'weight' => '30',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'study-marker-paper' => array(
      'info' => t('Study Marker Paper'),
      'weight' => '40',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'study-documents' => array(
      'info' => t('Study Documents'),
      'weight' => '50',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'study-supp-infos' => array(
      'info' => t('Study Supplementary Information'),
      'weight' => '60',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'study-timeline' => array(
      'info' => t('Study Timeline'),
      'weight' => '70',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'study-populations' => array(
      'info' => t('Study Populations'),
      'weight' => '80',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'study-datasets' => array(
      'info' => t('Study Datasets'),
      'weight' => '90',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
    'study-authorization' => array(
      'info' => t('Study Authorization'),
      'weight' => '100',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => $pages,
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
//    'study-menu' => array(
//      'info' => t('Study Menu'),
//      'weight' => '10',
//      'status' => TRUE,
//      'region' => 'sidebar_second',
//      'visibility' => BLOCK_VISIBILITY_PHP,
//      'pages' => $pages,
//      'cache' => DRUPAL_CACHE_PER_PAGE,
//    ),
  );
}

/**
 * Implements hook_block_view().
 */
function mica_studies_block_view($delta = '') {
  module_load_include('inc', 'mica_studies', 'mica_studies.blocks');
  $study = menu_get_object();

  $show_draft = (strpos(current_path(), '/draft') > 0 || $study->status == NODE_NOT_PUBLISHED);
  if ($show_draft) {
    $study = workbench_moderation_node_current_load($study);
  }

  if (empty($study)) {
    return NULL;
  }
  switch ($delta) {
    case 'study-general-info':
      return _mica_studies_block_study_general_info($study);
    case 'study-general-design':
      module_load_include('inc', 'mica_studies', 'mica_studies.blocks.general_design');
      return _mica_studies_block_study_general_design($study);
    case 'study-access':
      return _mica_studies_block_study_access($study);
    case 'study-marker-paper':
      return _mica_studies_block_study_marker_paper($study);
    case 'study-documents':
      return _mica_studies_block_study_documents($study);
    case 'study-supp-infos':
      return _mica_studies_block_study_supp_infos($study);
    case 'study-populations':
      return _mica_studies_block_study_populations($study, $show_draft);
    case 'study-timeline':
      module_load_include('inc', 'mica_studies', 'mica_studies.blocks.timeline');
      return _mica_studies_block_study_timeline($study, $show_draft);
    case 'study-datasets':
      return _mica_studies_block_study_datasets($study);
    case 'study-authorization':
      module_load_include('inc', 'mica_studies', 'mica_studies.blocks.authorization');
      return _mica_studies_block_study_authorization($study);
//    case 'study-menu':
//      module_load_include('inc', 'mica_studies', 'mica_studies.blocks.menu');
//      return _mica_studies_block_study_menu($study);
    default:
      return NULL;
  }
}

/**
 * generate breadcrumbs for pop & dce page
 */
function _mica_studies_menu_generate_breadcrumbs($path) {
  global $language;
  $lang = $language->language;
  $list = array();
  if ((module_exists('mica_i18n') && module_exists('local'))  && isset($lang)) {
    $result_lang = db_query('SELECT * FROM {menu_links} WHERE link_path = :link_path AND language = :lang', array(
      ':link_path' => $path,
      ':lang' => $lang
    ));
    $list_lang = array();
    foreach ($result_lang as $link) {
      $list_lang[] = $link;
    }
    if (empty($list_lang)) {
      watchdog('mica', 'Modules Language, translation my be not correctly enabled and configured', array(), WATCHDOG_NOTICE);
      $result = db_query("SELECT * FROM {menu_links} WHERE link_path = :link_path", array(':link_path' => $path));
      foreach ($result as $link) {
        $list[] = $link;
      }
    }
    else {
      $list = $list_lang;
    }
  }
  else {
    $result = db_query("SELECT * FROM {menu_links} WHERE link_path = :link_path", array(':link_path' => $path));
    foreach ($result as $link) {
      $list[] = $link;
    }
  }

  if (empty($list)) {
    watchdog('mica', 'Can\'t generate  Breadcrumbs for this node, try to edit this node or one of his child/parent an check if Menu settings > Provide a menu link  is checked and set his link title ', array(), WATCHDOG_ERROR);
    // throw new ErrorException('Error encountered, please contact your administrator, more information logged in Recent log messages ', 0, 0, 0, 0);
    return NULL;
  }

  $list = $list[0];

  if (is_object($list)) {
    $list = get_object_vars($list);
  }
  // Check all parent link possible
  if ($list['p9'] != 0) {
    $i = 9;
  }
  else if ($list['p8'] != 0) {
    $i = 8;
  }
  else if ($list['p7'] != 0) {
    $i = 7;
  }
  else if ($list['p6'] != 0) {
    $i = 6;
  }
  else if ($list['p5'] != 0) {
    $i = 5;
  }
  else if ($list['p4'] != 0) {
    $i = 4;
  }
  else if ($list['p3'] != 0) {
    $i = 3;
  }
  else if ($list['p2'] != 0) {
    $i = 2;
  }
  else if ($list['p1'] != 0) {
    $i = 1;
  }

  $breadcrumbs = array();
  for ($i; $i > 0; $i--) {
    $temp = menu_link_load($list['p' . $i]);
    // add breadcrumbs if link_path is correct
    if (!preg_match('/<firstchild>/', $temp['link_path'])) {
      $breadcrumbs[] = menu_link_load($list['p' . $i]);
    }
  }
  $breadcrumbs = array_reverse($breadcrumbs);
  return $breadcrumbs;

}

/**
 * Implements hook_node_reference_FIELD_potential_references
 */
function mica_studies_node_reference_field_pop_dce_potential_references($field, $options) {
  $references = array();
  $current_node = menu_get_object();
  $study_nid = NULL;
  if (empty($current_node)) {
    // new population
    if (isset($_REQUEST['study'])) {
      $study_nid = $_REQUEST['study'];
    }
  }
  else {
    $current_pop_wrapper = entity_metadata_wrapper('node', $current_node->nid);

    $study_nid = $current_pop_wrapper->field_pop_study->value();
  }

  if (!empty($study_nid)) {
    $study_wrapper = entity_metadata_wrapper('node', $study_nid);
    foreach ($study_wrapper->field_study_populations->getIterator() as $pop_wrapper) {
      if (isset($pop_wrapper->field_pop_dce)) {
        foreach ($pop_wrapper->field_pop_dce->getIterator() as $dce_wrapper) {
          $references[$dce_wrapper->getIdentifier()] = array(
            'title' => $dce_wrapper->title->value(),
            'rendered' => check_plain($dce_wrapper->title->value()),
          );
        }
      }
    }
  }

  return array($references);
}

/**
 * Implements hook_node_reference_FIELD_potential_references
 */
function mica_studies_node_reference_field_dce_population_potential_references($field, $options) {

  $current_node = menu_get_object();
  $study_nid = NULL;
  if (empty($current_node)) { // new dce
    if (isset($_REQUEST['population'])) {
      $study_nid = entity_metadata_wrapper('node', $_REQUEST['population'])->field_pop_study->getIdentifier();
    }
    else if (isset($_REQUEST['study'])) {
      $study_nid = $_REQUEST['study'];
    }
  }
  else {
    $current_dce_wrapper = entity_metadata_wrapper('node', $current_node);
    foreach ($current_dce_wrapper->field_dce_population->getIterator() as $pop_wrapper) {
      $study_nid = $pop_wrapper->field_pop_study->getIdentifier();
      break;
    }
  }

  $references = array();

  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'population');

  if (!empty($study_nid)) {
    $query->fieldCondition('field_pop_study', 'nid', $study_nid);
  }
  $entities = $query->execute();

  if (!empty($entities)) {
    foreach ($entities['node'] as $pop) {
      $pop_wrapper = entity_metadata_wrapper('node', $pop->nid);
      $references[$pop_wrapper->getIdentifier()] = array(
        'title' => $pop_wrapper->title->value(),
        'rendered' => check_plain($pop_wrapper->title->value()),
      );
    }
  }
  return array($references);
}

function _mica_studies_sort_populations($study) {
  $pop = array();
  $wrapper = entity_metadata_wrapper('node', $study->nid);
  foreach ($wrapper->field_study_populations->getIterator() as $pop_wrapper) {
    $events = array();
    if (isset($pop_wrapper->field_pop_dce)) {
      foreach ($pop_wrapper->field_pop_dce->getIterator() as $dce_wrapper) {
        $created = $dce_wrapper->created->value();
        $events[$dce_wrapper->getIdentifier()] = array(
          'start_year' => $dce_wrapper->field_dce_start_year->value(),
          'start_month' => $dce_wrapper->field_dce_start_month->value(),
          'end_year' => $dce_wrapper->field_dce_end_year->value(),
          'end_month' => $dce_wrapper->field_dce_end_month->value(),
          'created' => empty($created) ? 0 : intval($created)
        );
      }

      uasort($events, '_mica_studies_sort_dce');
      $array_vent =array_values($events);
      $pop[$pop_wrapper->getIdentifier()] = empty($events) ? array() : array_shift($array_vent);
    }
  }
  uasort($pop, '_mica_studies_sort_dce');
  return array_keys($pop);
}

function _mica_studies_sort_dce($x, $y) {
  $x_start = _mica_studies_convert_to_month(
    _mica_studies_get_dce_property($x, 'start_year', 0),
    _mica_studies_get_dce_property($x, 'start_month', 0));

  $y_start = _mica_studies_convert_to_month(
    _mica_studies_get_dce_property($y, 'start_year', 0),
    _mica_studies_get_dce_property($y, 'start_month', 0));

  if ($x_start === $y_start) {
    $x_end = _mica_studies_convert_to_month(
      _mica_studies_get_dce_property($x, 'end_year', 0),
      _mica_studies_get_dce_property($x, 'end_month', 0));

    $y_end = _mica_studies_convert_to_month(
      _mica_studies_get_dce_property($y, 'end_year', 0),
      _mica_studies_get_dce_property($y, 'end_month', 0));

    if ($x_end === $y_end) {
      $x_created = _mica_studies_get_dce_property($x, 'created', 0);
      $y_created = _mica_studies_get_dce_property($y, 'created', 0);
      if ($x_created === $y_created) {
        return 0;
      }
      return $x_created < $y_created ? -1 : 1;
    }
    return $x_end < $y_end ? -1 : 1;
  }
  return $x_start < $y_start ? -1 : 1;
}

function _mica_studies_get_dce_property($dce, $property, $default) {
  if (isset($dce['data']) && isset($dce['data'][$property])) {
    return $dce['data'][$property];
  }
  else if (isset($dce[$property])) {
    return $dce[$property];
  }
  return $default;
}

function _mica_studies_convert_to_month($year, $month) {
  return $year * 12 + $month;
}

function _mica_studies_get_month_name($month) {
  global $language;
  return format_date(mktime(0, 0, 0, $month, 1, 2013), 'custom', 'F', NULL, $language->language);
}

function _mica_sudies_format_dce_year($year, $month) {
  if (empty($year)) {
    return '';
  }
  return empty($month) ? "$year" : "$year (" . _mica_studies_get_month_name($month) . ")";
}
