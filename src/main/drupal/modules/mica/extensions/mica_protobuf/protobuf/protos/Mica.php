<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Mica.proto
//   Date: 2014-05-20 20:46:03

namespace obiba\mica {

  class StudySummaryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $designs = array();
    
    /**  @var \obiba\mica\TargetNumberDto */
    public $targetNumber = null;
    
    /**  @var \obiba\mica\CountryDto[]  */
    public $countries = array();
    
    /**  @var \obiba\mica\NetworkRelationDto[]  */
    public $networks = array();
    
    /**  @var string */
    public $publishedTag = null;
    
    /**  @var int */
    public $revisionsAhead = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudySummaryDto');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE designs = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "designs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE targetNumber = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "targetNumber";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TargetNumberDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE countries = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "countries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\CountryDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE networks = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "networks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\NetworkRelationDto';
      $descriptor->addField($f);

      // OPTIONAL STRING publishedTag = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "publishedTag";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 revisionsAhead = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "revisionsAhead";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearTimestamps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <designs> has a value
     *
     * @return boolean
     */
    public function hasDesigns(){
      return $this->_has(4);
    }
    
    /**
     * Clear <designs> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearDesigns(){
      return $this->_clear(4);
    }
    
    /**
     * Get <designs> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDesigns($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <designs> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setDesigns(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <designs>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDesignsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <designs>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addDesigns(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <targetNumber> has a value
     *
     * @return boolean
     */
    public function hasTargetNumber(){
      return $this->_has(5);
    }
    
    /**
     * Clear <targetNumber> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearTargetNumber(){
      return $this->_clear(5);
    }
    
    /**
     * Get <targetNumber> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function getTargetNumber(){
      return $this->_get(5);
    }
    
    /**
     * Set <targetNumber> value
     *
     * @param \obiba\mica\TargetNumberDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setTargetNumber(\obiba\mica\TargetNumberDto $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <countries> has a value
     *
     * @return boolean
     */
    public function hasCountries(){
      return $this->_has(6);
    }
    
    /**
     * Clear <countries> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearCountries(){
      return $this->_clear(6);
    }
    
    /**
     * Get <countries> value
     *
     * @param int $idx
     * @return \obiba\mica\CountryDto
     */
    public function getCountries($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <countries> value
     *
     * @param \obiba\mica\CountryDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setCountries(\obiba\mica\CountryDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <countries>
     *
     * @return \obiba\mica\CountryDto[]
     */
    public function getCountriesList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <countries>
     *
     * @param \obiba\mica\CountryDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addCountries(\obiba\mica\CountryDto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <networks> has a value
     *
     * @return boolean
     */
    public function hasNetworks(){
      return $this->_has(7);
    }
    
    /**
     * Clear <networks> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearNetworks(){
      return $this->_clear(7);
    }
    
    /**
     * Get <networks> value
     *
     * @param int $idx
     * @return \obiba\mica\NetworkRelationDto
     */
    public function getNetworks($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <networks> value
     *
     * @param \obiba\mica\NetworkRelationDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setNetworks(\obiba\mica\NetworkRelationDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <networks>
     *
     * @return \obiba\mica\NetworkRelationDto[]
     */
    public function getNetworksList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <networks>
     *
     * @param \obiba\mica\NetworkRelationDto $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function addNetworks(\obiba\mica\NetworkRelationDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <publishedTag> has a value
     *
     * @return boolean
     */
    public function hasPublishedTag(){
      return $this->_has(8);
    }
    
    /**
     * Clear <publishedTag> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearPublishedTag(){
      return $this->_clear(8);
    }
    
    /**
     * Get <publishedTag> value
     *
     * @return string
     */
    public function getPublishedTag(){
      return $this->_get(8);
    }
    
    /**
     * Set <publishedTag> value
     *
     * @param string $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setPublishedTag( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <revisionsAhead> has a value
     *
     * @return boolean
     */
    public function hasRevisionsAhead(){
      return $this->_has(9);
    }
    
    /**
     * Clear <revisionsAhead> value
     *
     * @return \obiba\mica\StudySummaryDto
     */
    public function clearRevisionsAhead(){
      return $this->_clear(9);
    }
    
    /**
     * Get <revisionsAhead> value
     *
     * @return int
     */
    public function getRevisionsAhead(){
      return $this->_get(9);
    }
    
    /**
     * Set <revisionsAhead> value
     *
     * @param int $value
     * @return \obiba\mica\StudySummaryDto
     */
    public function setRevisionsAhead( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace obiba\mica\StudyDto {

  class StudyMethodsDto extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $designs = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherDesign = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $followUpInfo = array();
    
    /**  @var string[]  */
    public $recruitments = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherRecruitment = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.StudyMethodsDto');

      // REPEATED STRING designs = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "designs";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherDesign = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "otherDesign";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE followUpInfo = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "followUpInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED STRING recruitments = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "recruitments";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherRecruitment = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "otherRecruitment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <designs> has a value
     *
     * @return boolean
     */
    public function hasDesigns(){
      return $this->_has(1);
    }
    
    /**
     * Clear <designs> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearDesigns(){
      return $this->_clear(1);
    }
    
    /**
     * Get <designs> value
     *
     * @param int $idx
     * @return string
     */
    public function getDesigns($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <designs> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setDesigns( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <designs>
     *
     * @return string[]
     */
    public function getDesignsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <designs>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addDesigns( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <otherDesign> has a value
     *
     * @return boolean
     */
    public function hasOtherDesign(){
      return $this->_has(2);
    }
    
    /**
     * Clear <otherDesign> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearOtherDesign(){
      return $this->_clear(2);
    }
    
    /**
     * Get <otherDesign> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherDesign($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <otherDesign> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setOtherDesign(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <otherDesign>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherDesignList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <otherDesign>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addOtherDesign(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <followUpInfo> has a value
     *
     * @return boolean
     */
    public function hasFollowUpInfo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <followUpInfo> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearFollowUpInfo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <followUpInfo> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getFollowUpInfo($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <followUpInfo> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setFollowUpInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <followUpInfo>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getFollowUpInfoList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <followUpInfo>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addFollowUpInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <recruitments> has a value
     *
     * @return boolean
     */
    public function hasRecruitments(){
      return $this->_has(4);
    }
    
    /**
     * Clear <recruitments> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearRecruitments(){
      return $this->_clear(4);
    }
    
    /**
     * Get <recruitments> value
     *
     * @param int $idx
     * @return string
     */
    public function getRecruitments($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <recruitments> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setRecruitments( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <recruitments>
     *
     * @return string[]
     */
    public function getRecruitmentsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <recruitments>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addRecruitments( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <otherRecruitment> has a value
     *
     * @return boolean
     */
    public function hasOtherRecruitment(){
      return $this->_has(5);
    }
    
    /**
     * Clear <otherRecruitment> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearOtherRecruitment(){
      return $this->_clear(5);
    }
    
    /**
     * Get <otherRecruitment> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherRecruitment($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <otherRecruitment> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setOtherRecruitment(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <otherRecruitment>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherRecruitmentList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <otherRecruitment>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addOtherRecruitment(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function clearInfo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(6, $value);
    }
  }
}

namespace obiba\mica\StudyDto {

  class NumberOfParticipantsDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\TargetNumberDto */
    public $participant = null;
    
    /**  @var \obiba\mica\TargetNumberDto */
    public $sample = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.NumberOfParticipantsDto');

      // OPTIONAL MESSAGE participant = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "participant";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TargetNumberDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sample = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sample";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TargetNumberDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <participant> has a value
     *
     * @return boolean
     */
    public function hasParticipant(){
      return $this->_has(1);
    }
    
    /**
     * Clear <participant> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function clearParticipant(){
      return $this->_clear(1);
    }
    
    /**
     * Get <participant> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function getParticipant(){
      return $this->_get(1);
    }
    
    /**
     * Set <participant> value
     *
     * @param \obiba\mica\TargetNumberDto $value
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function setParticipant(\obiba\mica\TargetNumberDto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sample> has a value
     *
     * @return boolean
     */
    public function hasSample(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sample> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function clearSample(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sample> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function getSample(){
      return $this->_get(2);
    }
    
    /**
     * Set <sample> value
     *
     * @param \obiba\mica\TargetNumberDto $value
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function setSample(\obiba\mica\TargetNumberDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function clearInfo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica\StudyDto\PopulationDto {

  class RecruitmentDto extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $dataSources = array();
    
    /**  @var string[]  */
    public $generalPopulationSources = array();
    
    /**  @var string[]  */
    public $specificPopulationSources = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherSpecificPopulationSource = array();
    
    /**  @var \obiba\mica\LocalizedStringDtos[]  */
    public $studies = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherSource = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.PopulationDto.RecruitmentDto');

      // REPEATED STRING dataSources = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dataSources";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING generalPopulationSources = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "generalPopulationSources";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING specificPopulationSources = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "specificPopulationSources";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherSpecificPopulationSource = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "otherSpecificPopulationSource";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE studies = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "studies";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDtos';
      $descriptor->addField($f);

      // REPEATED MESSAGE otherSource = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "otherSource";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dataSources> has a value
     *
     * @return boolean
     */
    public function hasDataSources(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dataSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearDataSources(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dataSources> value
     *
     * @param int $idx
     * @return string
     */
    public function getDataSources($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <dataSources> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setDataSources( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <dataSources>
     *
     * @return string[]
     */
    public function getDataSourcesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <dataSources>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addDataSources( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <generalPopulationSources> has a value
     *
     * @return boolean
     */
    public function hasGeneralPopulationSources(){
      return $this->_has(2);
    }
    
    /**
     * Clear <generalPopulationSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearGeneralPopulationSources(){
      return $this->_clear(2);
    }
    
    /**
     * Get <generalPopulationSources> value
     *
     * @param int $idx
     * @return string
     */
    public function getGeneralPopulationSources($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <generalPopulationSources> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setGeneralPopulationSources( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <generalPopulationSources>
     *
     * @return string[]
     */
    public function getGeneralPopulationSourcesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <generalPopulationSources>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addGeneralPopulationSources( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <specificPopulationSources> has a value
     *
     * @return boolean
     */
    public function hasSpecificPopulationSources(){
      return $this->_has(3);
    }
    
    /**
     * Clear <specificPopulationSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearSpecificPopulationSources(){
      return $this->_clear(3);
    }
    
    /**
     * Get <specificPopulationSources> value
     *
     * @param int $idx
     * @return string
     */
    public function getSpecificPopulationSources($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <specificPopulationSources> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setSpecificPopulationSources( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <specificPopulationSources>
     *
     * @return string[]
     */
    public function getSpecificPopulationSourcesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <specificPopulationSources>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addSpecificPopulationSources( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <otherSpecificPopulationSource> has a value
     *
     * @return boolean
     */
    public function hasOtherSpecificPopulationSource(){
      return $this->_has(4);
    }
    
    /**
     * Clear <otherSpecificPopulationSource> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearOtherSpecificPopulationSource(){
      return $this->_clear(4);
    }
    
    /**
     * Get <otherSpecificPopulationSource> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherSpecificPopulationSource($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <otherSpecificPopulationSource> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setOtherSpecificPopulationSource(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <otherSpecificPopulationSource>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherSpecificPopulationSourceList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <otherSpecificPopulationSource>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addOtherSpecificPopulationSource(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <studies> has a value
     *
     * @return boolean
     */
    public function hasStudies(){
      return $this->_has(5);
    }
    
    /**
     * Clear <studies> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearStudies(){
      return $this->_clear(5);
    }
    
    /**
     * Get <studies> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function getStudies($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <studies> value
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setStudies(\obiba\mica\LocalizedStringDtos $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <studies>
     *
     * @return \obiba\mica\LocalizedStringDtos[]
     */
    public function getStudiesList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <studies>
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addStudies(\obiba\mica\LocalizedStringDtos $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <otherSource> has a value
     *
     * @return boolean
     */
    public function hasOtherSource(){
      return $this->_has(6);
    }
    
    /**
     * Clear <otherSource> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearOtherSource(){
      return $this->_clear(6);
    }
    
    /**
     * Get <otherSource> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherSource($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <otherSource> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setOtherSource(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <otherSource>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherSourceList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <otherSource>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addOtherSource(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(7);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function clearInfo(){
      return $this->_clear(7);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(7, $value);
    }
  }
}

namespace obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto {

  class Gender extends \DrSlump\Protobuf\Enum {
    const men = 0;
    const women = 1;
  }
}
namespace obiba\mica\StudyDto\PopulationDto {

  class SelectionCriteriaDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto\Gender */
    public $gender = null;
    
    /**  @var int */
    public $ageMin = null;
    
    /**  @var int */
    public $ageMax = null;
    
    /**  @var string[]  */
    public $countriesIso = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $territory = array();
    
    /**  @var string[]  */
    public $criteria = array();
    
    /**  @var \obiba\mica\LocalizedStringDtos[]  */
    public $ethnicOrigin = array();
    
    /**  @var \obiba\mica\LocalizedStringDtos[]  */
    public $healthStatus = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherCriteria = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.PopulationDto.SelectionCriteriaDto');

      // OPTIONAL ENUM gender = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto\Gender';
      $descriptor->addField($f);

      // OPTIONAL INT32 ageMin = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ageMin";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ageMax = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ageMax";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING countriesIso = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "countriesIso";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE territory = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "territory";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED STRING criteria = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "criteria";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE ethnicOrigin = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "ethnicOrigin";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDtos';
      $descriptor->addField($f);

      // REPEATED MESSAGE healthStatus = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "healthStatus";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDtos';
      $descriptor->addField($f);

      // REPEATED MESSAGE otherCriteria = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "otherCriteria";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(1);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearGender(){
      return $this->_clear(1);
    }
    
    /**
     * Get <gender> value
     *
     * @return int - \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto\Gender
     */
    public function getGender(){
      return $this->_get(1);
    }
    
    /**
     * Set <gender> value
     *
     * @param int - \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto\Gender $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setGender( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ageMin> has a value
     *
     * @return boolean
     */
    public function hasAgeMin(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ageMin> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearAgeMin(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ageMin> value
     *
     * @return int
     */
    public function getAgeMin(){
      return $this->_get(2);
    }
    
    /**
     * Set <ageMin> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setAgeMin( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ageMax> has a value
     *
     * @return boolean
     */
    public function hasAgeMax(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ageMax> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearAgeMax(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ageMax> value
     *
     * @return int
     */
    public function getAgeMax(){
      return $this->_get(3);
    }
    
    /**
     * Set <ageMax> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setAgeMax( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <countriesIso> has a value
     *
     * @return boolean
     */
    public function hasCountriesIso(){
      return $this->_has(4);
    }
    
    /**
     * Clear <countriesIso> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearCountriesIso(){
      return $this->_clear(4);
    }
    
    /**
     * Get <countriesIso> value
     *
     * @param int $idx
     * @return string
     */
    public function getCountriesIso($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <countriesIso> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setCountriesIso( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <countriesIso>
     *
     * @return string[]
     */
    public function getCountriesIsoList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <countriesIso>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addCountriesIso( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <territory> has a value
     *
     * @return boolean
     */
    public function hasTerritory(){
      return $this->_has(5);
    }
    
    /**
     * Clear <territory> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearTerritory(){
      return $this->_clear(5);
    }
    
    /**
     * Get <territory> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getTerritory($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <territory> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setTerritory(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <territory>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getTerritoryList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <territory>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addTerritory(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <criteria> has a value
     *
     * @return boolean
     */
    public function hasCriteria(){
      return $this->_has(6);
    }
    
    /**
     * Clear <criteria> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearCriteria(){
      return $this->_clear(6);
    }
    
    /**
     * Get <criteria> value
     *
     * @param int $idx
     * @return string
     */
    public function getCriteria($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <criteria> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setCriteria( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <criteria>
     *
     * @return string[]
     */
    public function getCriteriaList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <criteria>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addCriteria( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <ethnicOrigin> has a value
     *
     * @return boolean
     */
    public function hasEthnicOrigin(){
      return $this->_has(7);
    }
    
    /**
     * Clear <ethnicOrigin> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearEthnicOrigin(){
      return $this->_clear(7);
    }
    
    /**
     * Get <ethnicOrigin> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function getEthnicOrigin($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <ethnicOrigin> value
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setEthnicOrigin(\obiba\mica\LocalizedStringDtos $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <ethnicOrigin>
     *
     * @return \obiba\mica\LocalizedStringDtos[]
     */
    public function getEthnicOriginList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <ethnicOrigin>
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addEthnicOrigin(\obiba\mica\LocalizedStringDtos $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <healthStatus> has a value
     *
     * @return boolean
     */
    public function hasHealthStatus(){
      return $this->_has(8);
    }
    
    /**
     * Clear <healthStatus> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearHealthStatus(){
      return $this->_clear(8);
    }
    
    /**
     * Get <healthStatus> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function getHealthStatus($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <healthStatus> value
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setHealthStatus(\obiba\mica\LocalizedStringDtos $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <healthStatus>
     *
     * @return \obiba\mica\LocalizedStringDtos[]
     */
    public function getHealthStatusList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <healthStatus>
     *
     * @param \obiba\mica\LocalizedStringDtos $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addHealthStatus(\obiba\mica\LocalizedStringDtos $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <otherCriteria> has a value
     *
     * @return boolean
     */
    public function hasOtherCriteria(){
      return $this->_has(9);
    }
    
    /**
     * Clear <otherCriteria> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearOtherCriteria(){
      return $this->_clear(9);
    }
    
    /**
     * Get <otherCriteria> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherCriteria($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <otherCriteria> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setOtherCriteria(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <otherCriteria>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherCriteriaList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <otherCriteria>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addOtherCriteria(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(10);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function clearInfo(){
      return $this->_clear(10);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(10, $value);
    }
  }
}

namespace obiba\mica\StudyDto\PopulationDto {

  class DataCollectionEventDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var int */
    public $startYear = null;
    
    /**  @var int */
    public $startMonth = null;
    
    /**  @var int */
    public $endYear = null;
    
    /**  @var int */
    public $endMonth = null;
    
    /**  @var string[]  */
    public $dataSources = array();
    
    /**  @var string[]  */
    public $administrativeDatabases = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherDataSources = array();
    
    /**  @var string[]  */
    public $bioSamples = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $tissueTypes = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherBioSamples = array();
    
    /**  @var \obiba\mica\AttachmentDto[]  */
    public $attachments = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.PopulationDto.DataCollectionEventDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REQUIRED INT32 startYear = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "startYear";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 startMonth = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "startMonth";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 endYear = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "endYear";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 endMonth = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "endMonth";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING dataSources = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "dataSources";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING administrativeDatabases = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "administrativeDatabases";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherDataSources = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "otherDataSources";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED STRING bioSamples = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "bioSamples";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE tissueTypes = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "tissueTypes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE otherBioSamples = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "otherBioSamples";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attachments = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "attachments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <startYear> has a value
     *
     * @return boolean
     */
    public function hasStartYear(){
      return $this->_has(4);
    }
    
    /**
     * Clear <startYear> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearStartYear(){
      return $this->_clear(4);
    }
    
    /**
     * Get <startYear> value
     *
     * @return int
     */
    public function getStartYear(){
      return $this->_get(4);
    }
    
    /**
     * Set <startYear> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setStartYear( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <startMonth> has a value
     *
     * @return boolean
     */
    public function hasStartMonth(){
      return $this->_has(5);
    }
    
    /**
     * Clear <startMonth> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearStartMonth(){
      return $this->_clear(5);
    }
    
    /**
     * Get <startMonth> value
     *
     * @return int
     */
    public function getStartMonth(){
      return $this->_get(5);
    }
    
    /**
     * Set <startMonth> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setStartMonth( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <endYear> has a value
     *
     * @return boolean
     */
    public function hasEndYear(){
      return $this->_has(6);
    }
    
    /**
     * Clear <endYear> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearEndYear(){
      return $this->_clear(6);
    }
    
    /**
     * Get <endYear> value
     *
     * @return int
     */
    public function getEndYear(){
      return $this->_get(6);
    }
    
    /**
     * Set <endYear> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setEndYear( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <endMonth> has a value
     *
     * @return boolean
     */
    public function hasEndMonth(){
      return $this->_has(7);
    }
    
    /**
     * Clear <endMonth> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearEndMonth(){
      return $this->_clear(7);
    }
    
    /**
     * Get <endMonth> value
     *
     * @return int
     */
    public function getEndMonth(){
      return $this->_get(7);
    }
    
    /**
     * Set <endMonth> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setEndMonth( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <dataSources> has a value
     *
     * @return boolean
     */
    public function hasDataSources(){
      return $this->_has(8);
    }
    
    /**
     * Clear <dataSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearDataSources(){
      return $this->_clear(8);
    }
    
    /**
     * Get <dataSources> value
     *
     * @param int $idx
     * @return string
     */
    public function getDataSources($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <dataSources> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setDataSources( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <dataSources>
     *
     * @return string[]
     */
    public function getDataSourcesList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <dataSources>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addDataSources( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <administrativeDatabases> has a value
     *
     * @return boolean
     */
    public function hasAdministrativeDatabases(){
      return $this->_has(9);
    }
    
    /**
     * Clear <administrativeDatabases> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearAdministrativeDatabases(){
      return $this->_clear(9);
    }
    
    /**
     * Get <administrativeDatabases> value
     *
     * @param int $idx
     * @return string
     */
    public function getAdministrativeDatabases($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <administrativeDatabases> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setAdministrativeDatabases( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <administrativeDatabases>
     *
     * @return string[]
     */
    public function getAdministrativeDatabasesList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <administrativeDatabases>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addAdministrativeDatabases( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <otherDataSources> has a value
     *
     * @return boolean
     */
    public function hasOtherDataSources(){
      return $this->_has(10);
    }
    
    /**
     * Clear <otherDataSources> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearOtherDataSources(){
      return $this->_clear(10);
    }
    
    /**
     * Get <otherDataSources> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherDataSources($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <otherDataSources> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setOtherDataSources(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <otherDataSources>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherDataSourcesList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <otherDataSources>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addOtherDataSources(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <bioSamples> has a value
     *
     * @return boolean
     */
    public function hasBioSamples(){
      return $this->_has(11);
    }
    
    /**
     * Clear <bioSamples> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearBioSamples(){
      return $this->_clear(11);
    }
    
    /**
     * Get <bioSamples> value
     *
     * @param int $idx
     * @return string
     */
    public function getBioSamples($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <bioSamples> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setBioSamples( $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <bioSamples>
     *
     * @return string[]
     */
    public function getBioSamplesList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <bioSamples>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addBioSamples( $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <tissueTypes> has a value
     *
     * @return boolean
     */
    public function hasTissueTypes(){
      return $this->_has(12);
    }
    
    /**
     * Clear <tissueTypes> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearTissueTypes(){
      return $this->_clear(12);
    }
    
    /**
     * Get <tissueTypes> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getTissueTypes($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <tissueTypes> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setTissueTypes(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <tissueTypes>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getTissueTypesList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <tissueTypes>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addTissueTypes(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(12, $value);
    }
    
    /**
     * Check if <otherBioSamples> has a value
     *
     * @return boolean
     */
    public function hasOtherBioSamples(){
      return $this->_has(13);
    }
    
    /**
     * Clear <otherBioSamples> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearOtherBioSamples(){
      return $this->_clear(13);
    }
    
    /**
     * Get <otherBioSamples> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherBioSamples($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <otherBioSamples> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setOtherBioSamples(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <otherBioSamples>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherBioSamplesList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <otherBioSamples>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addOtherBioSamples(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <attachments> has a value
     *
     * @return boolean
     */
    public function hasAttachments(){
      return $this->_has(14);
    }
    
    /**
     * Clear <attachments> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function clearAttachments(){
      return $this->_clear(14);
    }
    
    /**
     * Get <attachments> value
     *
     * @param int $idx
     * @return \obiba\mica\AttachmentDto
     */
    public function getAttachments($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <attachments> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function setAttachments(\obiba\mica\AttachmentDto $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <attachments>
     *
     * @return \obiba\mica\AttachmentDto[]
     */
    public function getAttachmentsList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <attachments>
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function addAttachments(\obiba\mica\AttachmentDto $value){
     return $this->_add(14, $value);
    }
  }
}

namespace obiba\mica\StudyDto {

  class PopulationDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var \obiba\mica\StudyDto\PopulationDto\RecruitmentDto */
    public $recruitment = null;
    
    /**  @var \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto */
    public $selectionCriteria = null;
    
    /**  @var \obiba\mica\StudyDto\NumberOfParticipantsDto */
    public $numberOfParticipants = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    
    /**  @var \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto[]  */
    public $dataCollectionEvents = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto.PopulationDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE recruitment = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "recruitment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto\RecruitmentDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE selectionCriteria = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "selectionCriteria";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE numberOfParticipants = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "numberOfParticipants";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\NumberOfParticipantsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE dataCollectionEvents = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "dataCollectionEvents";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <recruitment> has a value
     *
     * @return boolean
     */
    public function hasRecruitment(){
      return $this->_has(4);
    }
    
    /**
     * Clear <recruitment> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearRecruitment(){
      return $this->_clear(4);
    }
    
    /**
     * Get <recruitment> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\RecruitmentDto
     */
    public function getRecruitment(){
      return $this->_get(4);
    }
    
    /**
     * Set <recruitment> value
     *
     * @param \obiba\mica\StudyDto\PopulationDto\RecruitmentDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setRecruitment(\obiba\mica\StudyDto\PopulationDto\RecruitmentDto $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <selectionCriteria> has a value
     *
     * @return boolean
     */
    public function hasSelectionCriteria(){
      return $this->_has(5);
    }
    
    /**
     * Clear <selectionCriteria> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearSelectionCriteria(){
      return $this->_clear(5);
    }
    
    /**
     * Get <selectionCriteria> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto
     */
    public function getSelectionCriteria(){
      return $this->_get(5);
    }
    
    /**
     * Set <selectionCriteria> value
     *
     * @param \obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setSelectionCriteria(\obiba\mica\StudyDto\PopulationDto\SelectionCriteriaDto $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <numberOfParticipants> has a value
     *
     * @return boolean
     */
    public function hasNumberOfParticipants(){
      return $this->_has(6);
    }
    
    /**
     * Clear <numberOfParticipants> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearNumberOfParticipants(){
      return $this->_clear(6);
    }
    
    /**
     * Get <numberOfParticipants> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function getNumberOfParticipants(){
      return $this->_get(6);
    }
    
    /**
     * Set <numberOfParticipants> value
     *
     * @param \obiba\mica\StudyDto\NumberOfParticipantsDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setNumberOfParticipants(\obiba\mica\StudyDto\NumberOfParticipantsDto $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(7);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearInfo(){
      return $this->_clear(7);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <dataCollectionEvents> has a value
     *
     * @return boolean
     */
    public function hasDataCollectionEvents(){
      return $this->_has(8);
    }
    
    /**
     * Clear <dataCollectionEvents> value
     *
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function clearDataCollectionEvents(){
      return $this->_clear(8);
    }
    
    /**
     * Get <dataCollectionEvents> value
     *
     * @param int $idx
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto
     */
    public function getDataCollectionEvents($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <dataCollectionEvents> value
     *
     * @param \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function setDataCollectionEvents(\obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <dataCollectionEvents>
     *
     * @return \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto[]
     */
    public function getDataCollectionEventsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <dataCollectionEvents>
     *
     * @param \obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto $value
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function addDataCollectionEvents(\obiba\mica\StudyDto\PopulationDto\DataCollectionEventDto $value){
     return $this->_add(8, $value);
    }
  }
}

namespace obiba\mica {

  class StudyDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $acronym = array();
    
    /**  @var \obiba\mica\ContactDto[]  */
    public $investigators = array();
    
    /**  @var \obiba\mica\ContactDto[]  */
    public $contacts = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $objectives = array();
    
    /**  @var string */
    public $website = null;
    
    /**  @var \obiba\mica\AuthorizationDto */
    public $specificAuthorization = null;
    
    /**  @var \obiba\mica\AuthorizationDto */
    public $maelstromAuthorization = null;
    
    /**  @var \obiba\mica\StudyDto\StudyMethodsDto */
    public $methods = null;
    
    /**  @var \obiba\mica\StudyDto\NumberOfParticipantsDto */
    public $numberOfParticipants = null;
    
    /**  @var int */
    public $startYear = null;
    
    /**  @var int */
    public $endYear = null;
    
    /**  @var string[]  */
    public $access = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $otherAccess = array();
    
    /**  @var string */
    public $markerPaper = null;
    
    /**  @var string */
    public $pubmedId = null;
    
    /**  @var \obiba\mica\AttachmentDto[]  */
    public $attachments = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    
    /**  @var \obiba\mica\StudyDto\PopulationDto[]  */
    public $populations = array();
    
    /**  @var \obiba\mica\NetworkRelationDto[]  */
    public $networks = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE acronym = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "acronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE investigators = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "investigators";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\ContactDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE contacts = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "contacts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\ContactDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE objectives = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "objectives";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING website = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "website";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE specificAuthorization = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "specificAuthorization";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AuthorizationDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE maelstromAuthorization = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "maelstromAuthorization";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AuthorizationDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE methods = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "methods";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\StudyMethodsDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE numberOfParticipants = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "numberOfParticipants";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\StudyDto\NumberOfParticipantsDto';
      $descriptor->addField($f);

      // OPTIONAL INT32 startYear = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "startYear";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 endYear = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "endYear";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING access = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "access";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE otherAccess = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "otherAccess";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING markerPaper = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "markerPaper";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING pubmedId = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "pubmedId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE attachments = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "attachments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE populations = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "populations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudyDto\PopulationDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE networks = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "networks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\NetworkRelationDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearTimestamps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <acronym> has a value
     *
     * @return boolean
     */
    public function hasAcronym(){
      return $this->_has(4);
    }
    
    /**
     * Clear <acronym> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearAcronym(){
      return $this->_clear(4);
    }
    
    /**
     * Get <acronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getAcronym($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <acronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <acronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getAcronymList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <acronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <investigators> has a value
     *
     * @return boolean
     */
    public function hasInvestigators(){
      return $this->_has(5);
    }
    
    /**
     * Clear <investigators> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearInvestigators(){
      return $this->_clear(5);
    }
    
    /**
     * Get <investigators> value
     *
     * @param int $idx
     * @return \obiba\mica\ContactDto
     */
    public function getInvestigators($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <investigators> value
     *
     * @param \obiba\mica\ContactDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setInvestigators(\obiba\mica\ContactDto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <investigators>
     *
     * @return \obiba\mica\ContactDto[]
     */
    public function getInvestigatorsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <investigators>
     *
     * @param \obiba\mica\ContactDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addInvestigators(\obiba\mica\ContactDto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <contacts> has a value
     *
     * @return boolean
     */
    public function hasContacts(){
      return $this->_has(6);
    }
    
    /**
     * Clear <contacts> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearContacts(){
      return $this->_clear(6);
    }
    
    /**
     * Get <contacts> value
     *
     * @param int $idx
     * @return \obiba\mica\ContactDto
     */
    public function getContacts($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <contacts> value
     *
     * @param \obiba\mica\ContactDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setContacts(\obiba\mica\ContactDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <contacts>
     *
     * @return \obiba\mica\ContactDto[]
     */
    public function getContactsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <contacts>
     *
     * @param \obiba\mica\ContactDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addContacts(\obiba\mica\ContactDto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <objectives> has a value
     *
     * @return boolean
     */
    public function hasObjectives(){
      return $this->_has(7);
    }
    
    /**
     * Clear <objectives> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearObjectives(){
      return $this->_clear(7);
    }
    
    /**
     * Get <objectives> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getObjectives($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <objectives> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setObjectives(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <objectives>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getObjectivesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <objectives>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addObjectives(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <website> has a value
     *
     * @return boolean
     */
    public function hasWebsite(){
      return $this->_has(8);
    }
    
    /**
     * Clear <website> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearWebsite(){
      return $this->_clear(8);
    }
    
    /**
     * Get <website> value
     *
     * @return string
     */
    public function getWebsite(){
      return $this->_get(8);
    }
    
    /**
     * Set <website> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setWebsite( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <specificAuthorization> has a value
     *
     * @return boolean
     */
    public function hasSpecificAuthorization(){
      return $this->_has(9);
    }
    
    /**
     * Clear <specificAuthorization> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearSpecificAuthorization(){
      return $this->_clear(9);
    }
    
    /**
     * Get <specificAuthorization> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function getSpecificAuthorization(){
      return $this->_get(9);
    }
    
    /**
     * Set <specificAuthorization> value
     *
     * @param \obiba\mica\AuthorizationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setSpecificAuthorization(\obiba\mica\AuthorizationDto $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <maelstromAuthorization> has a value
     *
     * @return boolean
     */
    public function hasMaelstromAuthorization(){
      return $this->_has(10);
    }
    
    /**
     * Clear <maelstromAuthorization> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearMaelstromAuthorization(){
      return $this->_clear(10);
    }
    
    /**
     * Get <maelstromAuthorization> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function getMaelstromAuthorization(){
      return $this->_get(10);
    }
    
    /**
     * Set <maelstromAuthorization> value
     *
     * @param \obiba\mica\AuthorizationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setMaelstromAuthorization(\obiba\mica\AuthorizationDto $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <methods> has a value
     *
     * @return boolean
     */
    public function hasMethods(){
      return $this->_has(11);
    }
    
    /**
     * Clear <methods> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearMethods(){
      return $this->_clear(11);
    }
    
    /**
     * Get <methods> value
     *
     * @return \obiba\mica\StudyDto\StudyMethodsDto
     */
    public function getMethods(){
      return $this->_get(11);
    }
    
    /**
     * Set <methods> value
     *
     * @param \obiba\mica\StudyDto\StudyMethodsDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setMethods(\obiba\mica\StudyDto\StudyMethodsDto $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <numberOfParticipants> has a value
     *
     * @return boolean
     */
    public function hasNumberOfParticipants(){
      return $this->_has(12);
    }
    
    /**
     * Clear <numberOfParticipants> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearNumberOfParticipants(){
      return $this->_clear(12);
    }
    
    /**
     * Get <numberOfParticipants> value
     *
     * @return \obiba\mica\StudyDto\NumberOfParticipantsDto
     */
    public function getNumberOfParticipants(){
      return $this->_get(12);
    }
    
    /**
     * Set <numberOfParticipants> value
     *
     * @param \obiba\mica\StudyDto\NumberOfParticipantsDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setNumberOfParticipants(\obiba\mica\StudyDto\NumberOfParticipantsDto $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <startYear> has a value
     *
     * @return boolean
     */
    public function hasStartYear(){
      return $this->_has(13);
    }
    
    /**
     * Clear <startYear> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearStartYear(){
      return $this->_clear(13);
    }
    
    /**
     * Get <startYear> value
     *
     * @return int
     */
    public function getStartYear(){
      return $this->_get(13);
    }
    
    /**
     * Set <startYear> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto
     */
    public function setStartYear( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <endYear> has a value
     *
     * @return boolean
     */
    public function hasEndYear(){
      return $this->_has(14);
    }
    
    /**
     * Clear <endYear> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearEndYear(){
      return $this->_clear(14);
    }
    
    /**
     * Get <endYear> value
     *
     * @return int
     */
    public function getEndYear(){
      return $this->_get(14);
    }
    
    /**
     * Set <endYear> value
     *
     * @param int $value
     * @return \obiba\mica\StudyDto
     */
    public function setEndYear( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <access> has a value
     *
     * @return boolean
     */
    public function hasAccess(){
      return $this->_has(15);
    }
    
    /**
     * Clear <access> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearAccess(){
      return $this->_clear(15);
    }
    
    /**
     * Get <access> value
     *
     * @param int $idx
     * @return string
     */
    public function getAccess($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <access> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setAccess( $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <access>
     *
     * @return string[]
     */
    public function getAccessList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <access>
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function addAccess( $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <otherAccess> has a value
     *
     * @return boolean
     */
    public function hasOtherAccess(){
      return $this->_has(16);
    }
    
    /**
     * Clear <otherAccess> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearOtherAccess(){
      return $this->_clear(16);
    }
    
    /**
     * Get <otherAccess> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getOtherAccess($idx = NULL){
      return $this->_get(16, $idx);
    }
    
    /**
     * Set <otherAccess> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setOtherAccess(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(16, $value, $idx);
    }
    
    /**
     * Get all elements of <otherAccess>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getOtherAccessList(){
     return $this->_get(16);
    }
    
    /**
     * Add a new element to <otherAccess>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addOtherAccess(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(16, $value);
    }
    
    /**
     * Check if <markerPaper> has a value
     *
     * @return boolean
     */
    public function hasMarkerPaper(){
      return $this->_has(17);
    }
    
    /**
     * Clear <markerPaper> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearMarkerPaper(){
      return $this->_clear(17);
    }
    
    /**
     * Get <markerPaper> value
     *
     * @return string
     */
    public function getMarkerPaper(){
      return $this->_get(17);
    }
    
    /**
     * Set <markerPaper> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setMarkerPaper( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <pubmedId> has a value
     *
     * @return boolean
     */
    public function hasPubmedId(){
      return $this->_has(18);
    }
    
    /**
     * Clear <pubmedId> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearPubmedId(){
      return $this->_clear(18);
    }
    
    /**
     * Get <pubmedId> value
     *
     * @return string
     */
    public function getPubmedId(){
      return $this->_get(18);
    }
    
    /**
     * Set <pubmedId> value
     *
     * @param string $value
     * @return \obiba\mica\StudyDto
     */
    public function setPubmedId( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <attachments> has a value
     *
     * @return boolean
     */
    public function hasAttachments(){
      return $this->_has(19);
    }
    
    /**
     * Clear <attachments> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearAttachments(){
      return $this->_clear(19);
    }
    
    /**
     * Get <attachments> value
     *
     * @param int $idx
     * @return \obiba\mica\AttachmentDto
     */
    public function getAttachments($idx = NULL){
      return $this->_get(19, $idx);
    }
    
    /**
     * Set <attachments> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setAttachments(\obiba\mica\AttachmentDto $value, $idx = NULL){
      return $this->_set(19, $value, $idx);
    }
    
    /**
     * Get all elements of <attachments>
     *
     * @return \obiba\mica\AttachmentDto[]
     */
    public function getAttachmentsList(){
     return $this->_get(19);
    }
    
    /**
     * Add a new element to <attachments>
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addAttachments(\obiba\mica\AttachmentDto $value){
     return $this->_add(19, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(20);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearInfo(){
      return $this->_clear(20);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(20, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(20, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(20);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(20, $value);
    }
    
    /**
     * Check if <populations> has a value
     *
     * @return boolean
     */
    public function hasPopulations(){
      return $this->_has(21);
    }
    
    /**
     * Clear <populations> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearPopulations(){
      return $this->_clear(21);
    }
    
    /**
     * Get <populations> value
     *
     * @param int $idx
     * @return \obiba\mica\StudyDto\PopulationDto
     */
    public function getPopulations($idx = NULL){
      return $this->_get(21, $idx);
    }
    
    /**
     * Set <populations> value
     *
     * @param \obiba\mica\StudyDto\PopulationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setPopulations(\obiba\mica\StudyDto\PopulationDto $value, $idx = NULL){
      return $this->_set(21, $value, $idx);
    }
    
    /**
     * Get all elements of <populations>
     *
     * @return \obiba\mica\StudyDto\PopulationDto[]
     */
    public function getPopulationsList(){
     return $this->_get(21);
    }
    
    /**
     * Add a new element to <populations>
     *
     * @param \obiba\mica\StudyDto\PopulationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addPopulations(\obiba\mica\StudyDto\PopulationDto $value){
     return $this->_add(21, $value);
    }
    
    /**
     * Check if <networks> has a value
     *
     * @return boolean
     */
    public function hasNetworks(){
      return $this->_has(22);
    }
    
    /**
     * Clear <networks> value
     *
     * @return \obiba\mica\StudyDto
     */
    public function clearNetworks(){
      return $this->_clear(22);
    }
    
    /**
     * Get <networks> value
     *
     * @param int $idx
     * @return \obiba\mica\NetworkRelationDto
     */
    public function getNetworks($idx = NULL){
      return $this->_get(22, $idx);
    }
    
    /**
     * Set <networks> value
     *
     * @param \obiba\mica\NetworkRelationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function setNetworks(\obiba\mica\NetworkRelationDto $value, $idx = NULL){
      return $this->_set(22, $value, $idx);
    }
    
    /**
     * Get all elements of <networks>
     *
     * @return \obiba\mica\NetworkRelationDto[]
     */
    public function getNetworksList(){
     return $this->_get(22);
    }
    
    /**
     * Add a new element to <networks>
     *
     * @param \obiba\mica\NetworkRelationDto $value
     * @return \obiba\mica\StudyDto
     */
    public function addNetworks(\obiba\mica\NetworkRelationDto $value){
     return $this->_add(22, $value);
    }
  }
}

namespace obiba\mica {

  class NetworkRelationDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $networkId = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $networkName = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.NetworkRelationDto');

      // OPTIONAL STRING networkId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "networkId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE networkName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "networkName";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <networkId> has a value
     *
     * @return boolean
     */
    public function hasNetworkId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <networkId> value
     *
     * @return \obiba\mica\NetworkRelationDto
     */
    public function clearNetworkId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <networkId> value
     *
     * @return string
     */
    public function getNetworkId(){
      return $this->_get(1);
    }
    
    /**
     * Set <networkId> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkRelationDto
     */
    public function setNetworkId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <networkName> has a value
     *
     * @return boolean
     */
    public function hasNetworkName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <networkName> value
     *
     * @return \obiba\mica\NetworkRelationDto
     */
    public function clearNetworkName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <networkName> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getNetworkName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <networkName> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkRelationDto
     */
    public function setNetworkName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <networkName>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNetworkNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <networkName>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkRelationDto
     */
    public function addNetworkName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica\NetworkDto {

  class StudyRelationDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $studyId = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $studyName = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.NetworkDto.StudyRelationDto');

      // OPTIONAL STRING studyId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "studyId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE studyName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "studyName";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <studyId> has a value
     *
     * @return boolean
     */
    public function hasStudyId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <studyId> value
     *
     * @return \obiba\mica\NetworkDto\StudyRelationDto
     */
    public function clearStudyId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <studyId> value
     *
     * @return string
     */
    public function getStudyId(){
      return $this->_get(1);
    }
    
    /**
     * Set <studyId> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkDto\StudyRelationDto
     */
    public function setStudyId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <studyName> has a value
     *
     * @return boolean
     */
    public function hasStudyName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <studyName> value
     *
     * @return \obiba\mica\NetworkDto\StudyRelationDto
     */
    public function clearStudyName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <studyName> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getStudyName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <studyName> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto\StudyRelationDto
     */
    public function setStudyName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <studyName>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getStudyNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <studyName>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto\StudyRelationDto
     */
    public function addStudyName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class NetworkDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var \obiba\mica\TimestampsDto */
    public $timestamps = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $acronym = array();
    
    /**  @var \obiba\mica\ContactDto[]  */
    public $investigators = array();
    
    /**  @var \obiba\mica\ContactDto[]  */
    public $contacts = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var string */
    public $website = null;
    
    /**  @var \obiba\mica\AuthorizationDto */
    public $maelstromAuthorization = null;
    
    /**  @var \obiba\mica\AttachmentDto[]  */
    public $attachments = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $info = array();
    
    /**  @var \obiba\mica\NetworkDto\StudyRelationDto[]  */
    public $studies = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.NetworkDto');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamps = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\TimestampsDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE acronym = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "acronym";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE investigators = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "investigators";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\ContactDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE contacts = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "contacts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\ContactDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING website = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "website";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE maelstromAuthorization = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "maelstromAuthorization";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AuthorizationDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE attachments = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "attachments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AttachmentDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE studies = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "studies";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\NetworkDto\StudyRelationDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkDto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <timestamps> has a value
     *
     * @return boolean
     */
    public function hasTimestamps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamps> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearTimestamps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamps> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function getTimestamps(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamps> value
     *
     * @param \obiba\mica\TimestampsDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setTimestamps(\obiba\mica\TimestampsDto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <acronym> has a value
     *
     * @return boolean
     */
    public function hasAcronym(){
      return $this->_has(4);
    }
    
    /**
     * Clear <acronym> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearAcronym(){
      return $this->_clear(4);
    }
    
    /**
     * Get <acronym> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getAcronym($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <acronym> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setAcronym(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <acronym>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getAcronymList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <acronym>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addAcronym(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <investigators> has a value
     *
     * @return boolean
     */
    public function hasInvestigators(){
      return $this->_has(5);
    }
    
    /**
     * Clear <investigators> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearInvestigators(){
      return $this->_clear(5);
    }
    
    /**
     * Get <investigators> value
     *
     * @param int $idx
     * @return \obiba\mica\ContactDto
     */
    public function getInvestigators($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <investigators> value
     *
     * @param \obiba\mica\ContactDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setInvestigators(\obiba\mica\ContactDto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <investigators>
     *
     * @return \obiba\mica\ContactDto[]
     */
    public function getInvestigatorsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <investigators>
     *
     * @param \obiba\mica\ContactDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addInvestigators(\obiba\mica\ContactDto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <contacts> has a value
     *
     * @return boolean
     */
    public function hasContacts(){
      return $this->_has(6);
    }
    
    /**
     * Clear <contacts> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearContacts(){
      return $this->_clear(6);
    }
    
    /**
     * Get <contacts> value
     *
     * @param int $idx
     * @return \obiba\mica\ContactDto
     */
    public function getContacts($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <contacts> value
     *
     * @param \obiba\mica\ContactDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setContacts(\obiba\mica\ContactDto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <contacts>
     *
     * @return \obiba\mica\ContactDto[]
     */
    public function getContactsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <contacts>
     *
     * @param \obiba\mica\ContactDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addContacts(\obiba\mica\ContactDto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(7);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearDescription(){
      return $this->_clear(7);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <website> has a value
     *
     * @return boolean
     */
    public function hasWebsite(){
      return $this->_has(8);
    }
    
    /**
     * Clear <website> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearWebsite(){
      return $this->_clear(8);
    }
    
    /**
     * Get <website> value
     *
     * @return string
     */
    public function getWebsite(){
      return $this->_get(8);
    }
    
    /**
     * Set <website> value
     *
     * @param string $value
     * @return \obiba\mica\NetworkDto
     */
    public function setWebsite( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <maelstromAuthorization> has a value
     *
     * @return boolean
     */
    public function hasMaelstromAuthorization(){
      return $this->_has(9);
    }
    
    /**
     * Clear <maelstromAuthorization> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearMaelstromAuthorization(){
      return $this->_clear(9);
    }
    
    /**
     * Get <maelstromAuthorization> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function getMaelstromAuthorization(){
      return $this->_get(9);
    }
    
    /**
     * Set <maelstromAuthorization> value
     *
     * @param \obiba\mica\AuthorizationDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setMaelstromAuthorization(\obiba\mica\AuthorizationDto $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <attachments> has a value
     *
     * @return boolean
     */
    public function hasAttachments(){
      return $this->_has(10);
    }
    
    /**
     * Clear <attachments> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearAttachments(){
      return $this->_clear(10);
    }
    
    /**
     * Get <attachments> value
     *
     * @param int $idx
     * @return \obiba\mica\AttachmentDto
     */
    public function getAttachments($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <attachments> value
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setAttachments(\obiba\mica\AttachmentDto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <attachments>
     *
     * @return \obiba\mica\AttachmentDto[]
     */
    public function getAttachmentsList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <attachments>
     *
     * @param \obiba\mica\AttachmentDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addAttachments(\obiba\mica\AttachmentDto $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(11);
    }
    
    /**
     * Clear <info> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearInfo(){
      return $this->_clear(11);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getInfo($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setInfo(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getInfoList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addInfo(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <studies> has a value
     *
     * @return boolean
     */
    public function hasStudies(){
      return $this->_has(12);
    }
    
    /**
     * Clear <studies> value
     *
     * @return \obiba\mica\NetworkDto
     */
    public function clearStudies(){
      return $this->_clear(12);
    }
    
    /**
     * Get <studies> value
     *
     * @param int $idx
     * @return \obiba\mica\NetworkDto\StudyRelationDto
     */
    public function getStudies($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <studies> value
     *
     * @param \obiba\mica\NetworkDto\StudyRelationDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function setStudies(\obiba\mica\NetworkDto\StudyRelationDto $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <studies>
     *
     * @return \obiba\mica\NetworkDto\StudyRelationDto[]
     */
    public function getStudiesList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <studies>
     *
     * @param \obiba\mica\NetworkDto\StudyRelationDto $value
     * @return \obiba\mica\NetworkDto
     */
    public function addStudies(\obiba\mica\NetworkDto\StudyRelationDto $value){
     return $this->_add(12, $value);
    }
  }
}

namespace obiba\mica {

  class TimestampsDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $created = null;
    
    /**  @var string */
    public $lastUpdate = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TimestampsDto');

      // OPTIONAL STRING created = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "created";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING lastUpdate = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lastUpdate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated(){
      return $this->_has(1);
    }
    
    /**
     * Clear <created> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function clearCreated(){
      return $this->_clear(1);
    }
    
    /**
     * Get <created> value
     *
     * @return string
     */
    public function getCreated(){
      return $this->_get(1);
    }
    
    /**
     * Set <created> value
     *
     * @param string $value
     * @return \obiba\mica\TimestampsDto
     */
    public function setCreated( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lastUpdate> has a value
     *
     * @return boolean
     */
    public function hasLastUpdate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lastUpdate> value
     *
     * @return \obiba\mica\TimestampsDto
     */
    public function clearLastUpdate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lastUpdate> value
     *
     * @return string
     */
    public function getLastUpdate(){
      return $this->_get(2);
    }
    
    /**
     * Set <lastUpdate> value
     *
     * @param string $value
     * @return \obiba\mica\TimestampsDto
     */
    public function setLastUpdate( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class CountryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $iso = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.CountryDto');

      // REQUIRED STRING iso = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "iso";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <iso> has a value
     *
     * @return boolean
     */
    public function hasIso(){
      return $this->_has(1);
    }
    
    /**
     * Clear <iso> value
     *
     * @return \obiba\mica\CountryDto
     */
    public function clearIso(){
      return $this->_clear(1);
    }
    
    /**
     * Get <iso> value
     *
     * @return string
     */
    public function getIso(){
      return $this->_get(1);
    }
    
    /**
     * Set <iso> value
     *
     * @param string $value
     * @return \obiba\mica\CountryDto
     */
    public function setIso( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\CountryDto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\CountryDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\CountryDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class TargetNumberDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $noLimit = null;
    
    /**  @var int */
    public $number = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TargetNumberDto');

      // OPTIONAL BOOL noLimit = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "noLimit";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <noLimit> has a value
     *
     * @return boolean
     */
    public function hasNoLimit(){
      return $this->_has(1);
    }
    
    /**
     * Clear <noLimit> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function clearNoLimit(){
      return $this->_clear(1);
    }
    
    /**
     * Get <noLimit> value
     *
     * @return boolean
     */
    public function getNoLimit(){
      return $this->_get(1);
    }
    
    /**
     * Set <noLimit> value
     *
     * @param boolean $value
     * @return \obiba\mica\TargetNumberDto
     */
    public function setNoLimit( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number> value
     *
     * @return \obiba\mica\TargetNumberDto
     */
    public function clearNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \obiba\mica\TargetNumberDto
     */
    public function setNumber( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class LocalizedStringDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $lang = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.LocalizedStringDto');

      // REQUIRED STRING lang = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lang";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lang> has a value
     *
     * @return boolean
     */
    public function hasLang(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lang> value
     *
     * @return \obiba\mica\LocalizedStringDto
     */
    public function clearLang(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lang> value
     *
     * @return string
     */
    public function getLang(){
      return $this->_get(1);
    }
    
    /**
     * Set <lang> value
     *
     * @param string $value
     * @return \obiba\mica\LocalizedStringDto
     */
    public function setLang( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \obiba\mica\LocalizedStringDto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \obiba\mica\LocalizedStringDto
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class LocalizedStringDtos extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $localizedStrings = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.LocalizedStringDtos');

      // REPEATED MESSAGE localizedStrings = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "localizedStrings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <localizedStrings> has a value
     *
     * @return boolean
     */
    public function hasLocalizedStrings(){
      return $this->_has(1);
    }
    
    /**
     * Clear <localizedStrings> value
     *
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function clearLocalizedStrings(){
      return $this->_clear(1);
    }
    
    /**
     * Get <localizedStrings> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getLocalizedStrings($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <localizedStrings> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function setLocalizedStrings(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <localizedStrings>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getLocalizedStringsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <localizedStrings>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\LocalizedStringDtos
     */
    public function addLocalizedStrings(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(1, $value);
    }
  }
}

namespace obiba\mica\ContactDto {

  class InstitutionDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $name = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $department = array();
    
    /**  @var \obiba\mica\AddressDto */
    public $address = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.ContactDto.InstitutionDto');

      // REPEATED MESSAGE name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE department = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "department";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE address = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "address";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\AddressDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\ContactDto\InstitutionDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getName($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\ContactDto\InstitutionDto
     */
    public function setName(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getNameList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\ContactDto\InstitutionDto
     */
    public function addName(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <department> has a value
     *
     * @return boolean
     */
    public function hasDepartment(){
      return $this->_has(2);
    }
    
    /**
     * Clear <department> value
     *
     * @return \obiba\mica\ContactDto\InstitutionDto
     */
    public function clearDepartment(){
      return $this->_clear(2);
    }
    
    /**
     * Get <department> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDepartment($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <department> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\ContactDto\InstitutionDto
     */
    public function setDepartment(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <department>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDepartmentList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <department>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\ContactDto\InstitutionDto
     */
    public function addDepartment(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <address> has a value
     *
     * @return boolean
     */
    public function hasAddress(){
      return $this->_has(3);
    }
    
    /**
     * Clear <address> value
     *
     * @return \obiba\mica\ContactDto\InstitutionDto
     */
    public function clearAddress(){
      return $this->_clear(3);
    }
    
    /**
     * Get <address> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function getAddress(){
      return $this->_get(3);
    }
    
    /**
     * Set <address> value
     *
     * @param \obiba\mica\AddressDto $value
     * @return \obiba\mica\ContactDto\InstitutionDto
     */
    public function setAddress(\obiba\mica\AddressDto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica {

  class ContactDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $firstName = null;
    
    /**  @var string */
    public $lastName = null;
    
    /**  @var string */
    public $email = null;
    
    /**  @var string */
    public $phone = null;
    
    /**  @var boolean */
    public $dataAccessCommitteeMember = null;
    
    /**  @var \obiba\mica\ContactDto\InstitutionDto */
    public $institution = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.ContactDto');

      // OPTIONAL STRING title = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING firstName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "firstName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED STRING lastName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lastName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING email = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "email";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING phone = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "phone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL dataAccessCommitteeMember = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "dataAccessCommitteeMember";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE institution = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "institution";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\ContactDto\InstitutionDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(1);
    }
    
    /**
     * Clear <title> value
     *
     * @return \obiba\mica\ContactDto
     */
    public function clearTitle(){
      return $this->_clear(1);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(1);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \obiba\mica\ContactDto
     */
    public function setTitle( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <firstName> has a value
     *
     * @return boolean
     */
    public function hasFirstName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <firstName> value
     *
     * @return \obiba\mica\ContactDto
     */
    public function clearFirstName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <firstName> value
     *
     * @return string
     */
    public function getFirstName(){
      return $this->_get(2);
    }
    
    /**
     * Set <firstName> value
     *
     * @param string $value
     * @return \obiba\mica\ContactDto
     */
    public function setFirstName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <lastName> has a value
     *
     * @return boolean
     */
    public function hasLastName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <lastName> value
     *
     * @return \obiba\mica\ContactDto
     */
    public function clearLastName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <lastName> value
     *
     * @return string
     */
    public function getLastName(){
      return $this->_get(3);
    }
    
    /**
     * Set <lastName> value
     *
     * @param string $value
     * @return \obiba\mica\ContactDto
     */
    public function setLastName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <email> has a value
     *
     * @return boolean
     */
    public function hasEmail(){
      return $this->_has(4);
    }
    
    /**
     * Clear <email> value
     *
     * @return \obiba\mica\ContactDto
     */
    public function clearEmail(){
      return $this->_clear(4);
    }
    
    /**
     * Get <email> value
     *
     * @return string
     */
    public function getEmail(){
      return $this->_get(4);
    }
    
    /**
     * Set <email> value
     *
     * @param string $value
     * @return \obiba\mica\ContactDto
     */
    public function setEmail( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <phone> has a value
     *
     * @return boolean
     */
    public function hasPhone(){
      return $this->_has(5);
    }
    
    /**
     * Clear <phone> value
     *
     * @return \obiba\mica\ContactDto
     */
    public function clearPhone(){
      return $this->_clear(5);
    }
    
    /**
     * Get <phone> value
     *
     * @return string
     */
    public function getPhone(){
      return $this->_get(5);
    }
    
    /**
     * Set <phone> value
     *
     * @param string $value
     * @return \obiba\mica\ContactDto
     */
    public function setPhone( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <dataAccessCommitteeMember> has a value
     *
     * @return boolean
     */
    public function hasDataAccessCommitteeMember(){
      return $this->_has(6);
    }
    
    /**
     * Clear <dataAccessCommitteeMember> value
     *
     * @return \obiba\mica\ContactDto
     */
    public function clearDataAccessCommitteeMember(){
      return $this->_clear(6);
    }
    
    /**
     * Get <dataAccessCommitteeMember> value
     *
     * @return boolean
     */
    public function getDataAccessCommitteeMember(){
      return $this->_get(6);
    }
    
    /**
     * Set <dataAccessCommitteeMember> value
     *
     * @param boolean $value
     * @return \obiba\mica\ContactDto
     */
    public function setDataAccessCommitteeMember( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <institution> has a value
     *
     * @return boolean
     */
    public function hasInstitution(){
      return $this->_has(7);
    }
    
    /**
     * Clear <institution> value
     *
     * @return \obiba\mica\ContactDto
     */
    public function clearInstitution(){
      return $this->_clear(7);
    }
    
    /**
     * Get <institution> value
     *
     * @return \obiba\mica\ContactDto\InstitutionDto
     */
    public function getInstitution(){
      return $this->_get(7);
    }
    
    /**
     * Set <institution> value
     *
     * @param \obiba\mica\ContactDto\InstitutionDto $value
     * @return \obiba\mica\ContactDto
     */
    public function setInstitution(\obiba\mica\ContactDto\InstitutionDto $value){
      return $this->_set(7, $value);
    }
  }
}

namespace obiba\mica {

  class AuthorizationDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $authorized = null;
    
    /**  @var string */
    public $authorizer = null;
    
    /**  @var string */
    public $date = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AuthorizationDto');

      // OPTIONAL BOOL authorized = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "authorized";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING authorizer = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "authorizer";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING date = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "date";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <authorized> has a value
     *
     * @return boolean
     */
    public function hasAuthorized(){
      return $this->_has(1);
    }
    
    /**
     * Clear <authorized> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function clearAuthorized(){
      return $this->_clear(1);
    }
    
    /**
     * Get <authorized> value
     *
     * @return boolean
     */
    public function getAuthorized(){
      return $this->_get(1);
    }
    
    /**
     * Set <authorized> value
     *
     * @param boolean $value
     * @return \obiba\mica\AuthorizationDto
     */
    public function setAuthorized( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <authorizer> has a value
     *
     * @return boolean
     */
    public function hasAuthorizer(){
      return $this->_has(2);
    }
    
    /**
     * Clear <authorizer> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function clearAuthorizer(){
      return $this->_clear(2);
    }
    
    /**
     * Get <authorizer> value
     *
     * @return string
     */
    public function getAuthorizer(){
      return $this->_get(2);
    }
    
    /**
     * Set <authorizer> value
     *
     * @param string $value
     * @return \obiba\mica\AuthorizationDto
     */
    public function setAuthorizer( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <date> has a value
     *
     * @return boolean
     */
    public function hasDate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <date> value
     *
     * @return \obiba\mica\AuthorizationDto
     */
    public function clearDate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <date> value
     *
     * @return string
     */
    public function getDate(){
      return $this->_get(3);
    }
    
    /**
     * Set <date> value
     *
     * @param string $value
     * @return \obiba\mica\AuthorizationDto
     */
    public function setDate( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica {

  class AddressDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $street = array();
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $city = array();
    
    /**  @var string */
    public $zip = null;
    
    /**  @var string */
    public $state = null;
    
    /**  @var \obiba\mica\CountryDto */
    public $country = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AddressDto');

      // REPEATED MESSAGE street = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "street";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE city = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "city";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING zip = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "zip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING state = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE country = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "country";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\CountryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <street> has a value
     *
     * @return boolean
     */
    public function hasStreet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <street> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearStreet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <street> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getStreet($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <street> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AddressDto
     */
    public function setStreet(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <street>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getStreetList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <street>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AddressDto
     */
    public function addStreet(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <city> has a value
     *
     * @return boolean
     */
    public function hasCity(){
      return $this->_has(2);
    }
    
    /**
     * Clear <city> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearCity(){
      return $this->_clear(2);
    }
    
    /**
     * Get <city> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getCity($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <city> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AddressDto
     */
    public function setCity(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <city>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getCityList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <city>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AddressDto
     */
    public function addCity(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <zip> has a value
     *
     * @return boolean
     */
    public function hasZip(){
      return $this->_has(3);
    }
    
    /**
     * Clear <zip> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearZip(){
      return $this->_clear(3);
    }
    
    /**
     * Get <zip> value
     *
     * @return string
     */
    public function getZip(){
      return $this->_get(3);
    }
    
    /**
     * Set <zip> value
     *
     * @param string $value
     * @return \obiba\mica\AddressDto
     */
    public function setZip( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(4);
    }
    
    /**
     * Clear <state> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearState(){
      return $this->_clear(4);
    }
    
    /**
     * Get <state> value
     *
     * @return string
     */
    public function getState(){
      return $this->_get(4);
    }
    
    /**
     * Set <state> value
     *
     * @param string $value
     * @return \obiba\mica\AddressDto
     */
    public function setState( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <country> has a value
     *
     * @return boolean
     */
    public function hasCountry(){
      return $this->_has(5);
    }
    
    /**
     * Clear <country> value
     *
     * @return \obiba\mica\AddressDto
     */
    public function clearCountry(){
      return $this->_clear(5);
    }
    
    /**
     * Get <country> value
     *
     * @return \obiba\mica\CountryDto
     */
    public function getCountry(){
      return $this->_get(5);
    }
    
    /**
     * Set <country> value
     *
     * @param \obiba\mica\CountryDto $value
     * @return \obiba\mica\AddressDto
     */
    public function setCountry(\obiba\mica\CountryDto $value){
      return $this->_set(5, $value);
    }
  }
}

namespace obiba\mica {

  class AttachmentDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $fileName = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var \obiba\mica\LocalizedStringDto[]  */
    public $description = array();
    
    /**  @var string */
    public $lang = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $md5 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AttachmentDto');

      // REQUIRED STRING fileName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "fileName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\LocalizedStringDto';
      $descriptor->addField($f);

      // OPTIONAL STRING lang = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "lang";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 size = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING md5 = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "md5";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <fileName> has a value
     *
     * @return boolean
     */
    public function hasFileName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <fileName> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearFileName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <fileName> value
     *
     * @return string
     */
    public function getFileName(){
      return $this->_get(1);
    }
    
    /**
     * Set <fileName> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setFileName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @param int $idx
     * @return \obiba\mica\LocalizedStringDto
     */
    public function getDescription($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <description> value
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setDescription(\obiba\mica\LocalizedStringDto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <description>
     *
     * @return \obiba\mica\LocalizedStringDto[]
     */
    public function getDescriptionList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <description>
     *
     * @param \obiba\mica\LocalizedStringDto $value
     * @return \obiba\mica\AttachmentDto
     */
    public function addDescription(\obiba\mica\LocalizedStringDto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <lang> has a value
     *
     * @return boolean
     */
    public function hasLang(){
      return $this->_has(4);
    }
    
    /**
     * Clear <lang> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearLang(){
      return $this->_clear(4);
    }
    
    /**
     * Get <lang> value
     *
     * @return string
     */
    public function getLang(){
      return $this->_get(4);
    }
    
    /**
     * Set <lang> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setLang( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(5);
    }
    
    /**
     * Clear <size> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearSize(){
      return $this->_clear(5);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(5);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setSize( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <md5> has a value
     *
     * @return boolean
     */
    public function hasMd5(){
      return $this->_has(6);
    }
    
    /**
     * Clear <md5> value
     *
     * @return \obiba\mica\AttachmentDto
     */
    public function clearMd5(){
      return $this->_clear(6);
    }
    
    /**
     * Get <md5> value
     *
     * @return string
     */
    public function getMd5(){
      return $this->_get(6);
    }
    
    /**
     * Set <md5> value
     *
     * @param string $value
     * @return \obiba\mica\AttachmentDto
     */
    public function setMd5( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace obiba\mica {

  class MicaConfigDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string[]  */
    public $languages = array();
    
    /**  @var string */
    public $defaultCharSet = null;
    
    /**  @var string */
    public $publicUrl = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.MicaConfigDto');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING languages = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "languages";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED STRING defaultCharSet = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "defaultCharSet";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING publicUrl = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "publicUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <languages> has a value
     *
     * @return boolean
     */
    public function hasLanguages(){
      return $this->_has(2);
    }
    
    /**
     * Clear <languages> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearLanguages(){
      return $this->_clear(2);
    }
    
    /**
     * Get <languages> value
     *
     * @param int $idx
     * @return string
     */
    public function getLanguages($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <languages> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setLanguages( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <languages>
     *
     * @return string[]
     */
    public function getLanguagesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <languages>
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function addLanguages( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <defaultCharSet> has a value
     *
     * @return boolean
     */
    public function hasDefaultCharSet(){
      return $this->_has(3);
    }
    
    /**
     * Clear <defaultCharSet> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearDefaultCharSet(){
      return $this->_clear(3);
    }
    
    /**
     * Get <defaultCharSet> value
     *
     * @return string
     */
    public function getDefaultCharSet(){
      return $this->_get(3);
    }
    
    /**
     * Set <defaultCharSet> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setDefaultCharSet( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <publicUrl> has a value
     *
     * @return boolean
     */
    public function hasPublicUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <publicUrl> value
     *
     * @return \obiba\mica\MicaConfigDto
     */
    public function clearPublicUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <publicUrl> value
     *
     * @return string
     */
    public function getPublicUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <publicUrl> value
     *
     * @param string $value
     * @return \obiba\mica\MicaConfigDto
     */
    public function setPublicUrl( $value){
      return $this->_set(4, $value);
    }
  }
}

