<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: MicaSearch.proto
//   Date: 2014-10-21 19:16:50

namespace obiba\mica {

  class JoinQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\QueryDto */
    public $variableQueryDto = NULL;

    /**  @var \obiba\mica\QueryDto */
    public $datasetQueryDto = NULL;

    /**  @var \obiba\mica\QueryDto */
    public $studyQueryDto = NULL;

    /**  @var \obiba\mica\QueryDto */
    public $networkQueryDto = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.JoinQueryDto');

      // OPTIONAL MESSAGE variableQueryDto = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "variableQueryDto";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\QueryDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE datasetQueryDto = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "datasetQueryDto";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\QueryDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE studyQueryDto = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "studyQueryDto";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\QueryDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE networkQueryDto = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "networkQueryDto";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\QueryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <variableQueryDto> has a value
     *
     * @return boolean
     */
    public function hasVariableQueryDto() {
      return $this->_has(1);
    }

    /**
     * Clear <variableQueryDto> value
     *
     * @return \obiba\mica\JoinQueryDto
     */
    public function clearVariableQueryDto() {
      return $this->_clear(1);
    }

    /**
     * Get <variableQueryDto> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function getVariableQueryDto() {
      return $this->_get(1);
    }

    /**
     * Set <variableQueryDto> value
     *
     * @param \obiba\mica\QueryDto $value
     * @return \obiba\mica\JoinQueryDto
     */
    public function setVariableQueryDto(\obiba\mica\QueryDto $value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <datasetQueryDto> has a value
     *
     * @return boolean
     */
    public function hasDatasetQueryDto() {
      return $this->_has(2);
    }

    /**
     * Clear <datasetQueryDto> value
     *
     * @return \obiba\mica\JoinQueryDto
     */
    public function clearDatasetQueryDto() {
      return $this->_clear(2);
    }

    /**
     * Get <datasetQueryDto> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function getDatasetQueryDto() {
      return $this->_get(2);
    }

    /**
     * Set <datasetQueryDto> value
     *
     * @param \obiba\mica\QueryDto $value
     * @return \obiba\mica\JoinQueryDto
     */
    public function setDatasetQueryDto(\obiba\mica\QueryDto $value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <studyQueryDto> has a value
     *
     * @return boolean
     */
    public function hasStudyQueryDto() {
      return $this->_has(3);
    }

    /**
     * Clear <studyQueryDto> value
     *
     * @return \obiba\mica\JoinQueryDto
     */
    public function clearStudyQueryDto() {
      return $this->_clear(3);
    }

    /**
     * Get <studyQueryDto> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function getStudyQueryDto() {
      return $this->_get(3);
    }

    /**
     * Set <studyQueryDto> value
     *
     * @param \obiba\mica\QueryDto $value
     * @return \obiba\mica\JoinQueryDto
     */
    public function setStudyQueryDto(\obiba\mica\QueryDto $value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <networkQueryDto> has a value
     *
     * @return boolean
     */
    public function hasNetworkQueryDto() {
      return $this->_has(4);
    }

    /**
     * Clear <networkQueryDto> value
     *
     * @return \obiba\mica\JoinQueryDto
     */
    public function clearNetworkQueryDto() {
      return $this->_clear(4);
    }

    /**
     * Get <networkQueryDto> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function getNetworkQueryDto() {
      return $this->_get(4);
    }

    /**
     * Set <networkQueryDto> value
     *
     * @param \obiba\mica\QueryDto $value
     * @return \obiba\mica\JoinQueryDto
     */
    public function setNetworkQueryDto(\obiba\mica\QueryDto $value) {
      return $this->_set(4, $value);
    }
  }
}

namespace obiba\mica\QueryDto\SortDto {

  class Order extends \DrSlump\Protobuf\Enum {
    const ASC = 0;
    const DESC = 1;
  }
}
namespace obiba\mica\QueryDto {

  class SortDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = NULL;

    /**  @var int - \obiba\mica\QueryDto\SortDto\Order */
    public $order = \obiba\mica\QueryDto\SortDto\Order::ASC;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.QueryDto.SortDto');

      // REQUIRED STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "field";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM order = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "order";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\QueryDto\SortDto\Order';
      $f->default = \obiba\mica\QueryDto\SortDto\Order::ASC;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField() {
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \obiba\mica\QueryDto\SortDto
     */
    public function clearField() {
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField() {
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \obiba\mica\QueryDto\SortDto
     */
    public function setField($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <order> has a value
     *
     * @return boolean
     */
    public function hasOrder() {
      return $this->_has(2);
    }

    /**
     * Clear <order> value
     *
     * @return \obiba\mica\QueryDto\SortDto
     */
    public function clearOrder() {
      return $this->_clear(2);
    }

    /**
     * Get <order> value
     *
     * @return int - \obiba\mica\QueryDto\SortDto\Order
     */
    public function getOrder() {
      return $this->_get(2);
    }

    /**
     * Set <order> value
     *
     * @param int - \obiba\mica\QueryDto\SortDto\Order $value
     * @return \obiba\mica\QueryDto\SortDto
     */
    public function setOrder($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class QueryDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $from = 0;

    /**  @var int */
    public $size = 10;

    /**  @var \obiba\mica\QueryDto\SortDto */
    public $sort = NULL;

    /**  @var string */
    public $query = NULL;

    /**  @var \obiba\mica\FilteredQueryDto */
    public $filteredQuery = NULL;

    /**  @var string[] */
    public $aggsBy = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.QueryDto');

      // REQUIRED INT32 from = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "from";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default = 0;
      $descriptor->addField($f);

      // REQUIRED INT32 size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "size";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default = 10;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "sort";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\QueryDto\SortDto';
      $descriptor->addField($f);

      // OPTIONAL STRING query = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "query";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filteredQuery = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "filteredQuery";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\FilteredQueryDto';
      $descriptor->addField($f);

      // REPEATED STRING aggsBy = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "aggsBy";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom() {
      return $this->_has(1);
    }

    /**
     * Clear <from> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearFrom() {
      return $this->_clear(1);
    }

    /**
     * Get <from> value
     *
     * @return int
     */
    public function getFrom() {
      return $this->_get(1);
    }

    /**
     * Set <from> value
     *
     * @param int $value
     * @return \obiba\mica\QueryDto
     */
    public function setFrom($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize() {
      return $this->_has(2);
    }

    /**
     * Clear <size> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearSize() {
      return $this->_clear(2);
    }

    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize() {
      return $this->_get(2);
    }

    /**
     * Set <size> value
     *
     * @param int $value
     * @return \obiba\mica\QueryDto
     */
    public function setSize($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <sort> has a value
     *
     * @return boolean
     */
    public function hasSort() {
      return $this->_has(3);
    }

    /**
     * Clear <sort> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearSort() {
      return $this->_clear(3);
    }

    /**
     * Get <sort> value
     *
     * @return \obiba\mica\QueryDto\SortDto
     */
    public function getSort() {
      return $this->_get(3);
    }

    /**
     * Set <sort> value
     *
     * @param \obiba\mica\QueryDto\SortDto $value
     * @return \obiba\mica\QueryDto
     */
    public function setSort(\obiba\mica\QueryDto\SortDto $value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery() {
      return $this->_has(4);
    }

    /**
     * Clear <query> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearQuery() {
      return $this->_clear(4);
    }

    /**
     * Get <query> value
     *
     * @return string
     */
    public function getQuery() {
      return $this->_get(4);
    }

    /**
     * Set <query> value
     *
     * @param string $value
     * @return \obiba\mica\QueryDto
     */
    public function setQuery($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <filteredQuery> has a value
     *
     * @return boolean
     */
    public function hasFilteredQuery() {
      return $this->_has(5);
    }

    /**
     * Clear <filteredQuery> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearFilteredQuery() {
      return $this->_clear(5);
    }

    /**
     * Get <filteredQuery> value
     *
     * @return \obiba\mica\FilteredQueryDto
     */
    public function getFilteredQuery() {
      return $this->_get(5);
    }

    /**
     * Set <filteredQuery> value
     *
     * @param \obiba\mica\FilteredQueryDto $value
     * @return \obiba\mica\QueryDto
     */
    public function setFilteredQuery(\obiba\mica\FilteredQueryDto $value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <aggsBy> has a value
     *
     * @return boolean
     */
    public function hasAggsBy() {
      return $this->_has(6);
    }

    /**
     * Clear <aggsBy> value
     *
     * @return \obiba\mica\QueryDto
     */
    public function clearAggsBy() {
      return $this->_clear(6);
    }

    /**
     * Get <aggsBy> value
     *
     * @param int $idx
     * @return string
     */
    public function getAggsBy($idx = NULL) {
      return $this->_get(6, $idx);
    }

    /**
     * Set <aggsBy> value
     *
     * @param string $value
     * @return \obiba\mica\QueryDto
     */
    public function setAggsBy($value, $idx = NULL) {
      return $this->_set(6, $value, $idx);
    }

    /**
     * Get all elements of <aggsBy>
     *
     * @return string[]
     */
    public function getAggsByList() {
      return $this->_get(6);
    }

    /**
     * Add a new element to <aggsBy>
     *
     * @param string $value
     * @return \obiba\mica\QueryDto
     */
    public function addAggsBy($value) {
      return $this->_add(6, $value);
    }
  }
}

namespace obiba\mica {

  class FilteredQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\BoolFilterQueryDto */
    public $filter = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.FilteredQueryDto');

      // REQUIRED MESSAGE filter = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "filter";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\BoolFilterQueryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter() {
      return $this->_has(1);
    }

    /**
     * Clear <filter> value
     *
     * @return \obiba\mica\FilteredQueryDto
     */
    public function clearFilter() {
      return $this->_clear(1);
    }

    /**
     * Get <filter> value
     *
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function getFilter() {
      return $this->_get(1);
    }

    /**
     * Set <filter> value
     *
     * @param \obiba\mica\BoolFilterQueryDto $value
     * @return \obiba\mica\FilteredQueryDto
     */
    public function setFilter(\obiba\mica\BoolFilterQueryDto $value) {
      return $this->_set(1, $value);
    }
  }
}

namespace obiba\mica {

  class BoolFilterQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\FilterQueryDto[] */
    public $must = array();

    /**  @var \obiba\mica\FilterQueryDto[] */
    public $must_not = array();

    /**  @var \obiba\mica\FilterQueryDto[] */
    public $should = array();

    /**  @var \obiba\mica\ParentChildFilterDto */
    public $parentChildFilter = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.BoolFilterQueryDto');

      // REPEATED MESSAGE must = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "must";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\FilterQueryDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE must_not = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "must_not";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\FilterQueryDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE should = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "should";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\FilterQueryDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE parentChildFilter = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "parentChildFilter";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\ParentChildFilterDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <must> has a value
     *
     * @return boolean
     */
    public function hasMust() {
      return $this->_has(1);
    }

    /**
     * Clear <must> value
     *
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function clearMust() {
      return $this->_clear(1);
    }

    /**
     * Get <must> value
     *
     * @param int $idx
     * @return \obiba\mica\FilterQueryDto
     */
    public function getMust($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <must> value
     *
     * @param \obiba\mica\FilterQueryDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function setMust(\obiba\mica\FilterQueryDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <must>
     *
     * @return \obiba\mica\FilterQueryDto[]
     */
    public function getMustList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <must>
     *
     * @param \obiba\mica\FilterQueryDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function addMust(\obiba\mica\FilterQueryDto $value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <must_not> has a value
     *
     * @return boolean
     */
    public function hasMustNot() {
      return $this->_has(2);
    }

    /**
     * Clear <must_not> value
     *
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function clearMustNot() {
      return $this->_clear(2);
    }

    /**
     * Get <must_not> value
     *
     * @param int $idx
     * @return \obiba\mica\FilterQueryDto
     */
    public function getMustNot($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <must_not> value
     *
     * @param \obiba\mica\FilterQueryDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function setMustNot(\obiba\mica\FilterQueryDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <must_not>
     *
     * @return \obiba\mica\FilterQueryDto[]
     */
    public function getMustNotList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <must_not>
     *
     * @param \obiba\mica\FilterQueryDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function addMustNot(\obiba\mica\FilterQueryDto $value) {
      return $this->_add(2, $value);
    }

    /**
     * Check if <should> has a value
     *
     * @return boolean
     */
    public function hasShould() {
      return $this->_has(3);
    }

    /**
     * Clear <should> value
     *
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function clearShould() {
      return $this->_clear(3);
    }

    /**
     * Get <should> value
     *
     * @param int $idx
     * @return \obiba\mica\FilterQueryDto
     */
    public function getShould($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <should> value
     *
     * @param \obiba\mica\FilterQueryDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function setShould(\obiba\mica\FilterQueryDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <should>
     *
     * @return \obiba\mica\FilterQueryDto[]
     */
    public function getShouldList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <should>
     *
     * @param \obiba\mica\FilterQueryDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function addShould(\obiba\mica\FilterQueryDto $value) {
      return $this->_add(3, $value);
    }

    /**
     * Check if <parentChildFilter> has a value
     *
     * @return boolean
     */
    public function hasParentChildFilter() {
      return $this->_has(4);
    }

    /**
     * Clear <parentChildFilter> value
     *
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function clearParentChildFilter() {
      return $this->_clear(4);
    }

    /**
     * Get <parentChildFilter> value
     *
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function getParentChildFilter() {
      return $this->_get(4);
    }

    /**
     * Set <parentChildFilter> value
     *
     * @param \obiba\mica\ParentChildFilterDto $value
     * @return \obiba\mica\BoolFilterQueryDto
     */
    public function setParentChildFilter(\obiba\mica\ParentChildFilterDto $value) {
      return $this->_set(4, $value);
    }
  }
}

namespace obiba\mica\ParentChildFilterDto {

  class Relationship extends \DrSlump\Protobuf\Enum {
    const PARENT = 0;
    const CHILD = 1;
  }
}
namespace obiba\mica {

  class ParentChildFilterDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \obiba\mica\ParentChildFilterDto\Relationship */
    public $relationship = NULL;

    /**  @var string */
    public $type = NULL;

    /**  @var \obiba\mica\FilteredQueryDto */
    public $filteredQuery = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.ParentChildFilterDto');

      // REQUIRED ENUM relationship = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "relationship";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\ParentChildFilterDto\Relationship';
      $descriptor->addField($f);

      // REQUIRED STRING type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "type";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE filteredQuery = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "filteredQuery";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\FilteredQueryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <relationship> has a value
     *
     * @return boolean
     */
    public function hasRelationship() {
      return $this->_has(1);
    }

    /**
     * Clear <relationship> value
     *
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function clearRelationship() {
      return $this->_clear(1);
    }

    /**
     * Get <relationship> value
     *
     * @return int - \obiba\mica\ParentChildFilterDto\Relationship
     */
    public function getRelationship() {
      return $this->_get(1);
    }

    /**
     * Set <relationship> value
     *
     * @param int - \obiba\mica\ParentChildFilterDto\Relationship $value
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function setRelationship($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType() {
      return $this->_has(2);
    }

    /**
     * Clear <type> value
     *
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function clearType() {
      return $this->_clear(2);
    }

    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType() {
      return $this->_get(2);
    }

    /**
     * Set <type> value
     *
     * @param string $value
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function setType($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <filteredQuery> has a value
     *
     * @return boolean
     */
    public function hasFilteredQuery() {
      return $this->_has(3);
    }

    /**
     * Clear <filteredQuery> value
     *
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function clearFilteredQuery() {
      return $this->_clear(3);
    }

    /**
     * Get <filteredQuery> value
     *
     * @return \obiba\mica\FilteredQueryDto
     */
    public function getFilteredQuery() {
      return $this->_get(3);
    }

    /**
     * Set <filteredQuery> value
     *
     * @param \obiba\mica\FilteredQueryDto $value
     * @return \obiba\mica\ParentChildFilterDto
     */
    public function setFilteredQuery(\obiba\mica\FilteredQueryDto $value) {
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica {

  class FilterQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.FilterQueryDto');

      // REQUIRED STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "field";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField() {
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \obiba\mica\FilterQueryDto
     */
    public function clearField() {
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField() {
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \obiba\mica\FilterQueryDto
     */
    public function setField($value) {
      return $this->_set(1, $value);
    }
  }
}

namespace obiba\mica {

  class TermsFilterQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var string[] */
    public $values = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TermsFilterQueryDto');

      // REPEATED STRING values = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "values";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues() {
      return $this->_has(2);
    }

    /**
     * Clear <values> value
     *
     * @return \obiba\mica\TermsFilterQueryDto
     */
    public function clearValues() {
      return $this->_clear(2);
    }

    /**
     * Get <values> value
     *
     * @param int $idx
     * @return string
     */
    public function getValues($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <values> value
     *
     * @param string $value
     * @return \obiba\mica\TermsFilterQueryDto
     */
    public function setValues($value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <values>
     *
     * @return string[]
     */
    public function getValuesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <values>
     *
     * @param string $value
     * @return \obiba\mica\TermsFilterQueryDto
     */
    public function addValues($value) {
      return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica\RangeConditionDto {

  class Operator extends \DrSlump\Protobuf\Enum {
    const LT = 0;
    const LTE = 1;
    const GT = 2;
    const GTE = 3;
  }
}
namespace obiba\mica {

  class RangeConditionDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \obiba\mica\RangeConditionDto\Operator */
    public $op = NULL;

    /**  @var string */
    public $value = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.RangeConditionDto');

      // REQUIRED ENUM op = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "op";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\RangeConditionDto\Operator';
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "value";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <op> has a value
     *
     * @return boolean
     */
    public function hasOp() {
      return $this->_has(1);
    }

    /**
     * Clear <op> value
     *
     * @return \obiba\mica\RangeConditionDto
     */
    public function clearOp() {
      return $this->_clear(1);
    }

    /**
     * Get <op> value
     *
     * @return int - \obiba\mica\RangeConditionDto\Operator
     */
    public function getOp() {
      return $this->_get(1);
    }

    /**
     * Set <op> value
     *
     * @param int - \obiba\mica\RangeConditionDto\Operator $value
     * @return \obiba\mica\RangeConditionDto
     */
    public function setOp($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue() {
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \obiba\mica\RangeConditionDto
     */
    public function clearValue() {
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue() {
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param string $value
     * @return \obiba\mica\RangeConditionDto
     */
    public function setValue($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class RangeFilterQueryDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\RangeConditionDto */
    public $from = NULL;

    /**  @var \obiba\mica\RangeConditionDto */
    public $to = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.RangeFilterQueryDto');

      // OPTIONAL MESSAGE from = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "from";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\RangeConditionDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "to";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\RangeConditionDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom() {
      return $this->_has(1);
    }

    /**
     * Clear <from> value
     *
     * @return \obiba\mica\RangeFilterQueryDto
     */
    public function clearFrom() {
      return $this->_clear(1);
    }

    /**
     * Get <from> value
     *
     * @return \obiba\mica\RangeConditionDto
     */
    public function getFrom() {
      return $this->_get(1);
    }

    /**
     * Set <from> value
     *
     * @param \obiba\mica\RangeConditionDto $value
     * @return \obiba\mica\RangeFilterQueryDto
     */
    public function setFrom(\obiba\mica\RangeConditionDto $value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <to> has a value
     *
     * @return boolean
     */
    public function hasTo() {
      return $this->_has(2);
    }

    /**
     * Clear <to> value
     *
     * @return \obiba\mica\RangeFilterQueryDto
     */
    public function clearTo() {
      return $this->_clear(2);
    }

    /**
     * Get <to> value
     *
     * @return \obiba\mica\RangeConditionDto
     */
    public function getTo() {
      return $this->_get(2);
    }

    /**
     * Set <to> value
     *
     * @param \obiba\mica\RangeConditionDto $value
     * @return \obiba\mica\RangeFilterQueryDto
     */
    public function setTo(\obiba\mica\RangeConditionDto $value) {
      return $this->_set(2, $value);
    }
  }
}

namespace obiba\mica {

  class JoinQueryResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\QueryResultDto */
    public $variableResultDto = NULL;

    /**  @var \obiba\mica\QueryResultDto */
    public $datasetResultDto = NULL;

    /**  @var \obiba\mica\QueryResultDto */
    public $studyResultDto = NULL;

    /**  @var \obiba\mica\QueryResultDto */
    public $networkResultDto = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.JoinQueryResultDto');

      // OPTIONAL MESSAGE variableResultDto = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "variableResultDto";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\QueryResultDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE datasetResultDto = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "datasetResultDto";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\QueryResultDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE studyResultDto = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "studyResultDto";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\QueryResultDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE networkResultDto = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "networkResultDto";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\obiba\mica\QueryResultDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <variableResultDto> has a value
     *
     * @return boolean
     */
    public function hasVariableResultDto() {
      return $this->_has(1);
    }

    /**
     * Clear <variableResultDto> value
     *
     * @return \obiba\mica\JoinQueryResultDto
     */
    public function clearVariableResultDto() {
      return $this->_clear(1);
    }

    /**
     * Get <variableResultDto> value
     *
     * @return \obiba\mica\QueryResultDto
     */
    public function getVariableResultDto() {
      return $this->_get(1);
    }

    /**
     * Set <variableResultDto> value
     *
     * @param \obiba\mica\QueryResultDto $value
     * @return \obiba\mica\JoinQueryResultDto
     */
    public function setVariableResultDto(\obiba\mica\QueryResultDto $value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <datasetResultDto> has a value
     *
     * @return boolean
     */
    public function hasDatasetResultDto() {
      return $this->_has(2);
    }

    /**
     * Clear <datasetResultDto> value
     *
     * @return \obiba\mica\JoinQueryResultDto
     */
    public function clearDatasetResultDto() {
      return $this->_clear(2);
    }

    /**
     * Get <datasetResultDto> value
     *
     * @return \obiba\mica\QueryResultDto
     */
    public function getDatasetResultDto() {
      return $this->_get(2);
    }

    /**
     * Set <datasetResultDto> value
     *
     * @param \obiba\mica\QueryResultDto $value
     * @return \obiba\mica\JoinQueryResultDto
     */
    public function setDatasetResultDto(\obiba\mica\QueryResultDto $value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <studyResultDto> has a value
     *
     * @return boolean
     */
    public function hasStudyResultDto() {
      return $this->_has(3);
    }

    /**
     * Clear <studyResultDto> value
     *
     * @return \obiba\mica\JoinQueryResultDto
     */
    public function clearStudyResultDto() {
      return $this->_clear(3);
    }

    /**
     * Get <studyResultDto> value
     *
     * @return \obiba\mica\QueryResultDto
     */
    public function getStudyResultDto() {
      return $this->_get(3);
    }

    /**
     * Set <studyResultDto> value
     *
     * @param \obiba\mica\QueryResultDto $value
     * @return \obiba\mica\JoinQueryResultDto
     */
    public function setStudyResultDto(\obiba\mica\QueryResultDto $value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <networkResultDto> has a value
     *
     * @return boolean
     */
    public function hasNetworkResultDto() {
      return $this->_has(4);
    }

    /**
     * Clear <networkResultDto> value
     *
     * @return \obiba\mica\JoinQueryResultDto
     */
    public function clearNetworkResultDto() {
      return $this->_clear(4);
    }

    /**
     * Get <networkResultDto> value
     *
     * @return \obiba\mica\QueryResultDto
     */
    public function getNetworkResultDto() {
      return $this->_get(4);
    }

    /**
     * Set <networkResultDto> value
     *
     * @param \obiba\mica\QueryResultDto $value
     * @return \obiba\mica\JoinQueryResultDto
     */
    public function setNetworkResultDto(\obiba\mica\QueryResultDto $value) {
      return $this->_set(4, $value);
    }
  }
}

namespace obiba\mica {

  class QueryResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\AggregationResultDto[] */
    public $aggs = array();

    /**  @var int */
    public $totalHits = NULL;

    /**  @var int */
    public $totalCount = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.QueryResultDto');

      // REPEATED MESSAGE aggs = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "aggs";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AggregationResultDto';
      $descriptor->addField($f);

      // REQUIRED INT32 totalHits = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "totalHits";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 totalCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "totalCount";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <aggs> has a value
     *
     * @return boolean
     */
    public function hasAggs() {
      return $this->_has(1);
    }

    /**
     * Clear <aggs> value
     *
     * @return \obiba\mica\QueryResultDto
     */
    public function clearAggs() {
      return $this->_clear(1);
    }

    /**
     * Get <aggs> value
     *
     * @param int $idx
     * @return \obiba\mica\AggregationResultDto
     */
    public function getAggs($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <aggs> value
     *
     * @param \obiba\mica\AggregationResultDto $value
     * @return \obiba\mica\QueryResultDto
     */
    public function setAggs(\obiba\mica\AggregationResultDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <aggs>
     *
     * @return \obiba\mica\AggregationResultDto[]
     */
    public function getAggsList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <aggs>
     *
     * @param \obiba\mica\AggregationResultDto $value
     * @return \obiba\mica\QueryResultDto
     */
    public function addAggs(\obiba\mica\AggregationResultDto $value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <totalHits> has a value
     *
     * @return boolean
     */
    public function hasTotalHits() {
      return $this->_has(2);
    }

    /**
     * Clear <totalHits> value
     *
     * @return \obiba\mica\QueryResultDto
     */
    public function clearTotalHits() {
      return $this->_clear(2);
    }

    /**
     * Get <totalHits> value
     *
     * @return int
     */
    public function getTotalHits() {
      return $this->_get(2);
    }

    /**
     * Set <totalHits> value
     *
     * @param int $value
     * @return \obiba\mica\QueryResultDto
     */
    public function setTotalHits($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <totalCount> has a value
     *
     * @return boolean
     */
    public function hasTotalCount() {
      return $this->_has(3);
    }

    /**
     * Clear <totalCount> value
     *
     * @return \obiba\mica\QueryResultDto
     */
    public function clearTotalCount() {
      return $this->_clear(3);
    }

    /**
     * Get <totalCount> value
     *
     * @return int
     */
    public function getTotalCount() {
      return $this->_get(3);
    }

    /**
     * Set <totalCount> value
     *
     * @param int $value
     * @return \obiba\mica\QueryResultDto
     */
    public function setTotalCount($value) {
      return $this->_set(3, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetVariableResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetVariableResolverDto[] */
    public $summaries = array();

    /**  @var \obiba\mica\DatasetVariableDto[] */
    public $variables = array();

    /**  @var \obiba\mica\DatasetDto[] */
    public $datasets = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetVariableResultDto');

      // REPEATED MESSAGE summaries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "summaries";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableResolverDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE variables = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "variables";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetVariableDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE datasets = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "datasets";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <summaries> has a value
     *
     * @return boolean
     */
    public function hasSummaries() {
      return $this->_has(1);
    }

    /**
     * Clear <summaries> value
     *
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function clearSummaries() {
      return $this->_clear(1);
    }

    /**
     * Get <summaries> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableResolverDto
     */
    public function getSummaries($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <summaries> value
     *
     * @param \obiba\mica\DatasetVariableResolverDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function setSummaries(\obiba\mica\DatasetVariableResolverDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <summaries>
     *
     * @return \obiba\mica\DatasetVariableResolverDto[]
     */
    public function getSummariesList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <summaries>
     *
     * @param \obiba\mica\DatasetVariableResolverDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function addSummaries(\obiba\mica\DatasetVariableResolverDto $value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <variables> has a value
     *
     * @return boolean
     */
    public function hasVariables() {
      return $this->_has(2);
    }

    /**
     * Clear <variables> value
     *
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function clearVariables() {
      return $this->_clear(2);
    }

    /**
     * Get <variables> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetVariableDto
     */
    public function getVariables($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <variables> value
     *
     * @param \obiba\mica\DatasetVariableDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function setVariables(\obiba\mica\DatasetVariableDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <variables>
     *
     * @return \obiba\mica\DatasetVariableDto[]
     */
    public function getVariablesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <variables>
     *
     * @param \obiba\mica\DatasetVariableDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function addVariables(\obiba\mica\DatasetVariableDto $value) {
      return $this->_add(2, $value);
    }

    /**
     * Check if <datasets> has a value
     *
     * @return boolean
     */
    public function hasDatasets() {
      return $this->_has(3);
    }

    /**
     * Clear <datasets> value
     *
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function clearDatasets() {
      return $this->_clear(3);
    }

    /**
     * Get <datasets> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetDto
     */
    public function getDatasets($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <datasets> value
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function setDatasets(\obiba\mica\DatasetDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <datasets>
     *
     * @return \obiba\mica\DatasetDto[]
     */
    public function getDatasetsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <datasets>
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetVariableResultDto
     */
    public function addDatasets(\obiba\mica\DatasetDto $value) {
      return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class DatasetResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\DatasetDto[] */
    public $datasets = array();

    /**  @var \obiba\mica\DocumentDigestDto[] */
    public $digests = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.DatasetResultDto');

      // REPEATED MESSAGE datasets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "datasets";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DatasetDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE digests = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "digests";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DocumentDigestDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <datasets> has a value
     *
     * @return boolean
     */
    public function hasDatasets() {
      return $this->_has(1);
    }

    /**
     * Clear <datasets> value
     *
     * @return \obiba\mica\DatasetResultDto
     */
    public function clearDatasets() {
      return $this->_clear(1);
    }

    /**
     * Get <datasets> value
     *
     * @param int $idx
     * @return \obiba\mica\DatasetDto
     */
    public function getDatasets($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <datasets> value
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetResultDto
     */
    public function setDatasets(\obiba\mica\DatasetDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <datasets>
     *
     * @return \obiba\mica\DatasetDto[]
     */
    public function getDatasetsList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <datasets>
     *
     * @param \obiba\mica\DatasetDto $value
     * @return \obiba\mica\DatasetResultDto
     */
    public function addDatasets(\obiba\mica\DatasetDto $value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <digests> has a value
     *
     * @return boolean
     */
    public function hasDigests() {
      return $this->_has(2);
    }

    /**
     * Clear <digests> value
     *
     * @return \obiba\mica\DatasetResultDto
     */
    public function clearDigests() {
      return $this->_clear(2);
    }

    /**
     * Get <digests> value
     *
     * @param int $idx
     * @return \obiba\mica\DocumentDigestDto
     */
    public function getDigests($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <digests> value
     *
     * @param \obiba\mica\DocumentDigestDto $value
     * @return \obiba\mica\DatasetResultDto
     */
    public function setDigests(\obiba\mica\DocumentDigestDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <digests>
     *
     * @return \obiba\mica\DocumentDigestDto[]
     */
    public function getDigestsList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <digests>
     *
     * @param \obiba\mica\DocumentDigestDto $value
     * @return \obiba\mica\DatasetResultDto
     */
    public function addDigests(\obiba\mica\DocumentDigestDto $value) {
      return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class StudyResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\StudySummaryDto[] */
    public $summaries = array();

    /**  @var \obiba\mica\StudyDto[] */
    public $studies = array();

    /**  @var \obiba\mica\DocumentDigestDto[] */
    public $digests = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudyResultDto');

      // REPEATED MESSAGE summaries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "summaries";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudySummaryDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE studies = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "studies";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudyDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE digests = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "digests";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DocumentDigestDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <summaries> has a value
     *
     * @return boolean
     */
    public function hasSummaries() {
      return $this->_has(1);
    }

    /**
     * Clear <summaries> value
     *
     * @return \obiba\mica\StudyResultDto
     */
    public function clearSummaries() {
      return $this->_clear(1);
    }

    /**
     * Get <summaries> value
     *
     * @param int $idx
     * @return \obiba\mica\StudySummaryDto
     */
    public function getSummaries($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <summaries> value
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function setSummaries(\obiba\mica\StudySummaryDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <summaries>
     *
     * @return \obiba\mica\StudySummaryDto[]
     */
    public function getSummariesList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <summaries>
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function addSummaries(\obiba\mica\StudySummaryDto $value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <studies> has a value
     *
     * @return boolean
     */
    public function hasStudies() {
      return $this->_has(2);
    }

    /**
     * Clear <studies> value
     *
     * @return \obiba\mica\StudyResultDto
     */
    public function clearStudies() {
      return $this->_clear(2);
    }

    /**
     * Get <studies> value
     *
     * @param int $idx
     * @return \obiba\mica\StudyDto
     */
    public function getStudies($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <studies> value
     *
     * @param \obiba\mica\StudyDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function setStudies(\obiba\mica\StudyDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <studies>
     *
     * @return \obiba\mica\StudyDto[]
     */
    public function getStudiesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <studies>
     *
     * @param \obiba\mica\StudyDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function addStudies(\obiba\mica\StudyDto $value) {
      return $this->_add(2, $value);
    }

    /**
     * Check if <digests> has a value
     *
     * @return boolean
     */
    public function hasDigests() {
      return $this->_has(3);
    }

    /**
     * Clear <digests> value
     *
     * @return \obiba\mica\StudyResultDto
     */
    public function clearDigests() {
      return $this->_clear(3);
    }

    /**
     * Get <digests> value
     *
     * @param int $idx
     * @return \obiba\mica\DocumentDigestDto
     */
    public function getDigests($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <digests> value
     *
     * @param \obiba\mica\DocumentDigestDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function setDigests(\obiba\mica\DocumentDigestDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <digests>
     *
     * @return \obiba\mica\DocumentDigestDto[]
     */
    public function getDigestsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <digests>
     *
     * @param \obiba\mica\DocumentDigestDto $value
     * @return \obiba\mica\StudyResultDto
     */
    public function addDigests(\obiba\mica\DocumentDigestDto $value) {
      return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class CountStatsDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $variables = NULL;

    /**  @var int */
    public $studyDatasets = NULL;

    /**  @var int */
    public $harmonizationDatasets = NULL;

    /**  @var int */
    public $studies = NULL;

    /**  @var int */
    public $networks = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.CountStatsDto');

      // OPTIONAL INT32 variables = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "variables";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 studyDatasets = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "studyDatasets";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 harmonizationDatasets = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "harmonizationDatasets";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 studies = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "studies";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 networks = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "networks";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <variables> has a value
     *
     * @return boolean
     */
    public function hasVariables() {
      return $this->_has(1);
    }

    /**
     * Clear <variables> value
     *
     * @return \obiba\mica\CountStatsDto
     */
    public function clearVariables() {
      return $this->_clear(1);
    }

    /**
     * Get <variables> value
     *
     * @return int
     */
    public function getVariables() {
      return $this->_get(1);
    }

    /**
     * Set <variables> value
     *
     * @param int $value
     * @return \obiba\mica\CountStatsDto
     */
    public function setVariables($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <studyDatasets> has a value
     *
     * @return boolean
     */
    public function hasStudyDatasets() {
      return $this->_has(2);
    }

    /**
     * Clear <studyDatasets> value
     *
     * @return \obiba\mica\CountStatsDto
     */
    public function clearStudyDatasets() {
      return $this->_clear(2);
    }

    /**
     * Get <studyDatasets> value
     *
     * @return int
     */
    public function getStudyDatasets() {
      return $this->_get(2);
    }

    /**
     * Set <studyDatasets> value
     *
     * @param int $value
     * @return \obiba\mica\CountStatsDto
     */
    public function setStudyDatasets($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <harmonizationDatasets> has a value
     *
     * @return boolean
     */
    public function hasHarmonizationDatasets() {
      return $this->_has(3);
    }

    /**
     * Clear <harmonizationDatasets> value
     *
     * @return \obiba\mica\CountStatsDto
     */
    public function clearHarmonizationDatasets() {
      return $this->_clear(3);
    }

    /**
     * Get <harmonizationDatasets> value
     *
     * @return int
     */
    public function getHarmonizationDatasets() {
      return $this->_get(3);
    }

    /**
     * Set <harmonizationDatasets> value
     *
     * @param int $value
     * @return \obiba\mica\CountStatsDto
     */
    public function setHarmonizationDatasets($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <studies> has a value
     *
     * @return boolean
     */
    public function hasStudies() {
      return $this->_has(4);
    }

    /**
     * Clear <studies> value
     *
     * @return \obiba\mica\CountStatsDto
     */
    public function clearStudies() {
      return $this->_clear(4);
    }

    /**
     * Get <studies> value
     *
     * @return int
     */
    public function getStudies() {
      return $this->_get(4);
    }

    /**
     * Set <studies> value
     *
     * @param int $value
     * @return \obiba\mica\CountStatsDto
     */
    public function setStudies($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <networks> has a value
     *
     * @return boolean
     */
    public function hasNetworks() {
      return $this->_has(5);
    }

    /**
     * Clear <networks> value
     *
     * @return \obiba\mica\CountStatsDto
     */
    public function clearNetworks() {
      return $this->_clear(5);
    }

    /**
     * Get <networks> value
     *
     * @return int
     */
    public function getNetworks() {
      return $this->_get(5);
    }

    /**
     * Set <networks> value
     *
     * @param int $value
     * @return \obiba\mica\CountStatsDto
     */
    public function setNetworks($value) {
      return $this->_set(5, $value);
    }
  }
}

namespace obiba\mica {

  class NetworkResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\NetworkDto[] */
    public $networks = array();

    /**  @var \obiba\mica\DocumentDigestDto[] */
    public $digests = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.NetworkResultDto');

      // REPEATED MESSAGE networks = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "networks";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\NetworkDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE digests = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "digests";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\DocumentDigestDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <networks> has a value
     *
     * @return boolean
     */
    public function hasNetworks() {
      return $this->_has(1);
    }

    /**
     * Clear <networks> value
     *
     * @return \obiba\mica\NetworkResultDto
     */
    public function clearNetworks() {
      return $this->_clear(1);
    }

    /**
     * Get <networks> value
     *
     * @param int $idx
     * @return \obiba\mica\NetworkDto
     */
    public function getNetworks($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <networks> value
     *
     * @param \obiba\mica\NetworkDto $value
     * @return \obiba\mica\NetworkResultDto
     */
    public function setNetworks(\obiba\mica\NetworkDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <networks>
     *
     * @return \obiba\mica\NetworkDto[]
     */
    public function getNetworksList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <networks>
     *
     * @param \obiba\mica\NetworkDto $value
     * @return \obiba\mica\NetworkResultDto
     */
    public function addNetworks(\obiba\mica\NetworkDto $value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <digests> has a value
     *
     * @return boolean
     */
    public function hasDigests() {
      return $this->_has(2);
    }

    /**
     * Clear <digests> value
     *
     * @return \obiba\mica\NetworkResultDto
     */
    public function clearDigests() {
      return $this->_clear(2);
    }

    /**
     * Get <digests> value
     *
     * @param int $idx
     * @return \obiba\mica\DocumentDigestDto
     */
    public function getDigests($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <digests> value
     *
     * @param \obiba\mica\DocumentDigestDto $value
     * @return \obiba\mica\NetworkResultDto
     */
    public function setDigests(\obiba\mica\DocumentDigestDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <digests>
     *
     * @return \obiba\mica\DocumentDigestDto[]
     */
    public function getDigestsList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <digests>
     *
     * @param \obiba\mica\DocumentDigestDto $value
     * @return \obiba\mica\NetworkResultDto
     */
    public function addDigests(\obiba\mica\DocumentDigestDto $value) {
      return $this->_add(2, $value);
    }
  }
}

namespace obiba\mica {

  class StudySummariesResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\StudySummaryDto[] */
    public $summaries = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StudySummariesResultDto');

      // REPEATED MESSAGE summaries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "summaries";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\StudySummaryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <summaries> has a value
     *
     * @return boolean
     */
    public function hasSummaries() {
      return $this->_has(1);
    }

    /**
     * Clear <summaries> value
     *
     * @return \obiba\mica\StudySummariesResultDto
     */
    public function clearSummaries() {
      return $this->_clear(1);
    }

    /**
     * Get <summaries> value
     *
     * @param int $idx
     * @return \obiba\mica\StudySummaryDto
     */
    public function getSummaries($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <summaries> value
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudySummariesResultDto
     */
    public function setSummaries(\obiba\mica\StudySummaryDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <summaries>
     *
     * @return \obiba\mica\StudySummaryDto[]
     */
    public function getSummariesList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <summaries>
     *
     * @param \obiba\mica\StudySummaryDto $value
     * @return \obiba\mica\StudySummariesResultDto
     */
    public function addSummaries(\obiba\mica\StudySummaryDto $value) {
      return $this->_add(1, $value);
    }
  }
}

namespace obiba\mica {

  class AggregationResultDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $aggregation = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.AggregationResultDto');

      // REQUIRED STRING aggregation = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "aggregation";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <aggregation> has a value
     *
     * @return boolean
     */
    public function hasAggregation() {
      return $this->_has(1);
    }

    /**
     * Clear <aggregation> value
     *
     * @return \obiba\mica\AggregationResultDto
     */
    public function clearAggregation() {
      return $this->_clear(1);
    }

    /**
     * Get <aggregation> value
     *
     * @return string
     */
    public function getAggregation() {
      return $this->_get(1);
    }

    /**
     * Set <aggregation> value
     *
     * @param string $value
     * @return \obiba\mica\AggregationResultDto
     */
    public function setAggregation($value) {
      return $this->_set(1, $value);
    }
  }
}

namespace obiba\mica {

  class TermsAggregationResultDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = NULL;

    /**  @var int */
    public $count = NULL;

    /**  @var \obiba\mica\AggregationResultDto[] */
    public $aggs = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TermsAggregationResultDto');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "key";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "count";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE aggs = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "aggs";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\AggregationResultDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey() {
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function clearKey() {
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey() {
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function setKey($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount() {
      return $this->_has(2);
    }

    /**
     * Clear <count> value
     *
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function clearCount() {
      return $this->_clear(2);
    }

    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount() {
      return $this->_get(2);
    }

    /**
     * Set <count> value
     *
     * @param int $value
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function setCount($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <aggs> has a value
     *
     * @return boolean
     */
    public function hasAggs() {
      return $this->_has(3);
    }

    /**
     * Clear <aggs> value
     *
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function clearAggs() {
      return $this->_clear(3);
    }

    /**
     * Get <aggs> value
     *
     * @param int $idx
     * @return \obiba\mica\AggregationResultDto
     */
    public function getAggs($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <aggs> value
     *
     * @param \obiba\mica\AggregationResultDto $value
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function setAggs(\obiba\mica\AggregationResultDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <aggs>
     *
     * @return \obiba\mica\AggregationResultDto[]
     */
    public function getAggsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <aggs>
     *
     * @param \obiba\mica\AggregationResultDto $value
     * @return \obiba\mica\TermsAggregationResultDto
     */
    public function addAggs(\obiba\mica\AggregationResultDto $value) {
      return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class StatsAggregationResultDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $count = NULL;

    /**  @var float */
    public $min = NULL;

    /**  @var float */
    public $max = NULL;

    /**  @var float */
    public $avg = NULL;

    /**  @var float */
    public $sum = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.StatsAggregationResultDto');

      // REQUIRED INT64 count = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "count";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE min = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "min";
      $f->type = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE max = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "max";
      $f->type = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE avg = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "avg";
      $f->type = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE sum = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "sum";
      $f->type = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount() {
      return $this->_has(1);
    }

    /**
     * Clear <count> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearCount() {
      return $this->_clear(1);
    }

    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount() {
      return $this->_get(1);
    }

    /**
     * Set <count> value
     *
     * @param int $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setCount($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <min> has a value
     *
     * @return boolean
     */
    public function hasMin() {
      return $this->_has(2);
    }

    /**
     * Clear <min> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearMin() {
      return $this->_clear(2);
    }

    /**
     * Get <min> value
     *
     * @return float
     */
    public function getMin() {
      return $this->_get(2);
    }

    /**
     * Set <min> value
     *
     * @param float $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setMin($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <max> has a value
     *
     * @return boolean
     */
    public function hasMax() {
      return $this->_has(3);
    }

    /**
     * Clear <max> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearMax() {
      return $this->_clear(3);
    }

    /**
     * Get <max> value
     *
     * @return float
     */
    public function getMax() {
      return $this->_get(3);
    }

    /**
     * Set <max> value
     *
     * @param float $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setMax($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <avg> has a value
     *
     * @return boolean
     */
    public function hasAvg() {
      return $this->_has(4);
    }

    /**
     * Clear <avg> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearAvg() {
      return $this->_clear(4);
    }

    /**
     * Get <avg> value
     *
     * @return float
     */
    public function getAvg() {
      return $this->_get(4);
    }

    /**
     * Set <avg> value
     *
     * @param float $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setAvg($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <sum> has a value
     *
     * @return boolean
     */
    public function hasSum() {
      return $this->_has(5);
    }

    /**
     * Clear <sum> value
     *
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function clearSum() {
      return $this->_clear(5);
    }

    /**
     * Get <sum> value
     *
     * @return float
     */
    public function getSum() {
      return $this->_get(5);
    }

    /**
     * Set <sum> value
     *
     * @param float $value
     * @return \obiba\mica\StatsAggregationResultDto
     */
    public function setSum($value) {
      return $this->_set(5, $value);
    }
  }
}

namespace obiba\mica {

  class BucketCoverageDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = NULL;

    /**  @var string */
    public $value = NULL;

    /**  @var int */
    public $hits = NULL;

    /**  @var int */
    public $count = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.BucketCoverageDto');

      // REQUIRED STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "field";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "value";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 hits = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "hits";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 count = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "count";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField() {
      return $this->_has(1);
    }

    /**
     * Clear <field> value
     *
     * @return \obiba\mica\BucketCoverageDto
     */
    public function clearField() {
      return $this->_clear(1);
    }

    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField() {
      return $this->_get(1);
    }

    /**
     * Set <field> value
     *
     * @param string $value
     * @return \obiba\mica\BucketCoverageDto
     */
    public function setField($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue() {
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \obiba\mica\BucketCoverageDto
     */
    public function clearValue() {
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue() {
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param string $value
     * @return \obiba\mica\BucketCoverageDto
     */
    public function setValue($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <hits> has a value
     *
     * @return boolean
     */
    public function hasHits() {
      return $this->_has(3);
    }

    /**
     * Clear <hits> value
     *
     * @return \obiba\mica\BucketCoverageDto
     */
    public function clearHits() {
      return $this->_clear(3);
    }

    /**
     * Get <hits> value
     *
     * @return int
     */
    public function getHits() {
      return $this->_get(3);
    }

    /**
     * Set <hits> value
     *
     * @param int $value
     * @return \obiba\mica\BucketCoverageDto
     */
    public function setHits($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount() {
      return $this->_has(4);
    }

    /**
     * Clear <count> value
     *
     * @return \obiba\mica\BucketCoverageDto
     */
    public function clearCount() {
      return $this->_clear(4);
    }

    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount() {
      return $this->_get(4);
    }

    /**
     * Set <count> value
     *
     * @param int $value
     * @return \obiba\mica\BucketCoverageDto
     */
    public function setCount($value) {
      return $this->_set(4, $value);
    }
  }
}

namespace obiba\mica {

  class TermCoverageDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\TaxonomyEntityDto */
    public $term = NULL;

    /**  @var int */
    public $hits = NULL;

    /**  @var \obiba\mica\BucketCoverageDto[] */
    public $buckets = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TermCoverageDto');

      // REQUIRED MESSAGE term = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "term";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\TaxonomyEntityDto';
      $descriptor->addField($f);

      // REQUIRED INT32 hits = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "hits";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE buckets = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "buckets";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\BucketCoverageDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <term> has a value
     *
     * @return boolean
     */
    public function hasTerm() {
      return $this->_has(1);
    }

    /**
     * Clear <term> value
     *
     * @return \obiba\mica\TermCoverageDto
     */
    public function clearTerm() {
      return $this->_clear(1);
    }

    /**
     * Get <term> value
     *
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function getTerm() {
      return $this->_get(1);
    }

    /**
     * Set <term> value
     *
     * @param \obiba\mica\TaxonomyEntityDto $value
     * @return \obiba\mica\TermCoverageDto
     */
    public function setTerm(\obiba\mica\TaxonomyEntityDto $value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <hits> has a value
     *
     * @return boolean
     */
    public function hasHits() {
      return $this->_has(2);
    }

    /**
     * Clear <hits> value
     *
     * @return \obiba\mica\TermCoverageDto
     */
    public function clearHits() {
      return $this->_clear(2);
    }

    /**
     * Get <hits> value
     *
     * @return int
     */
    public function getHits() {
      return $this->_get(2);
    }

    /**
     * Set <hits> value
     *
     * @param int $value
     * @return \obiba\mica\TermCoverageDto
     */
    public function setHits($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <buckets> has a value
     *
     * @return boolean
     */
    public function hasBuckets() {
      return $this->_has(3);
    }

    /**
     * Clear <buckets> value
     *
     * @return \obiba\mica\TermCoverageDto
     */
    public function clearBuckets() {
      return $this->_clear(3);
    }

    /**
     * Get <buckets> value
     *
     * @param int $idx
     * @return \obiba\mica\BucketCoverageDto
     */
    public function getBuckets($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <buckets> value
     *
     * @param \obiba\mica\BucketCoverageDto $value
     * @return \obiba\mica\TermCoverageDto
     */
    public function setBuckets(\obiba\mica\BucketCoverageDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <buckets>
     *
     * @return \obiba\mica\BucketCoverageDto[]
     */
    public function getBucketsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <buckets>
     *
     * @param \obiba\mica\BucketCoverageDto $value
     * @return \obiba\mica\TermCoverageDto
     */
    public function addBuckets(\obiba\mica\BucketCoverageDto $value) {
      return $this->_add(3, $value);
    }
  }
}

namespace obiba\mica {

  class VocabularyCoverageDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\TaxonomyEntityDto */
    public $vocabulary = NULL;

    /**  @var int */
    public $hits = NULL;

    /**  @var int */
    public $count = NULL;

    /**  @var \obiba\mica\BucketCoverageDto[] */
    public $buckets = array();

    /**  @var \obiba\mica\TermCoverageDto[] */
    public $terms = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.VocabularyCoverageDto');

      // REQUIRED MESSAGE vocabulary = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "vocabulary";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\TaxonomyEntityDto';
      $descriptor->addField($f);

      // REQUIRED INT32 hits = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "hits";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "count";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE buckets = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "buckets";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\BucketCoverageDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE terms = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "terms";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\TermCoverageDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <vocabulary> has a value
     *
     * @return boolean
     */
    public function hasVocabulary() {
      return $this->_has(1);
    }

    /**
     * Clear <vocabulary> value
     *
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function clearVocabulary() {
      return $this->_clear(1);
    }

    /**
     * Get <vocabulary> value
     *
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function getVocabulary() {
      return $this->_get(1);
    }

    /**
     * Set <vocabulary> value
     *
     * @param \obiba\mica\TaxonomyEntityDto $value
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function setVocabulary(\obiba\mica\TaxonomyEntityDto $value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <hits> has a value
     *
     * @return boolean
     */
    public function hasHits() {
      return $this->_has(2);
    }

    /**
     * Clear <hits> value
     *
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function clearHits() {
      return $this->_clear(2);
    }

    /**
     * Get <hits> value
     *
     * @return int
     */
    public function getHits() {
      return $this->_get(2);
    }

    /**
     * Set <hits> value
     *
     * @param int $value
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function setHits($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount() {
      return $this->_has(3);
    }

    /**
     * Clear <count> value
     *
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function clearCount() {
      return $this->_clear(3);
    }

    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount() {
      return $this->_get(3);
    }

    /**
     * Set <count> value
     *
     * @param int $value
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function setCount($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <buckets> has a value
     *
     * @return boolean
     */
    public function hasBuckets() {
      return $this->_has(4);
    }

    /**
     * Clear <buckets> value
     *
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function clearBuckets() {
      return $this->_clear(4);
    }

    /**
     * Get <buckets> value
     *
     * @param int $idx
     * @return \obiba\mica\BucketCoverageDto
     */
    public function getBuckets($idx = NULL) {
      return $this->_get(4, $idx);
    }

    /**
     * Set <buckets> value
     *
     * @param \obiba\mica\BucketCoverageDto $value
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function setBuckets(\obiba\mica\BucketCoverageDto $value, $idx = NULL) {
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <buckets>
     *
     * @return \obiba\mica\BucketCoverageDto[]
     */
    public function getBucketsList() {
      return $this->_get(4);
    }

    /**
     * Add a new element to <buckets>
     *
     * @param \obiba\mica\BucketCoverageDto $value
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function addBuckets(\obiba\mica\BucketCoverageDto $value) {
      return $this->_add(4, $value);
    }

    /**
     * Check if <terms> has a value
     *
     * @return boolean
     */
    public function hasTerms() {
      return $this->_has(5);
    }

    /**
     * Clear <terms> value
     *
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function clearTerms() {
      return $this->_clear(5);
    }

    /**
     * Get <terms> value
     *
     * @param int $idx
     * @return \obiba\mica\TermCoverageDto
     */
    public function getTerms($idx = NULL) {
      return $this->_get(5, $idx);
    }

    /**
     * Set <terms> value
     *
     * @param \obiba\mica\TermCoverageDto $value
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function setTerms(\obiba\mica\TermCoverageDto $value, $idx = NULL) {
      return $this->_set(5, $value, $idx);
    }

    /**
     * Get all elements of <terms>
     *
     * @return \obiba\mica\TermCoverageDto[]
     */
    public function getTermsList() {
      return $this->_get(5);
    }

    /**
     * Add a new element to <terms>
     *
     * @param \obiba\mica\TermCoverageDto $value
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function addTerms(\obiba\mica\TermCoverageDto $value) {
      return $this->_add(5, $value);
    }
  }
}

namespace obiba\mica {

  class TaxonomyCoverageDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\TaxonomyEntityDto */
    public $taxonomy = NULL;

    /**  @var int */
    public $hits = NULL;

    /**  @var \obiba\mica\BucketCoverageDto[] */
    public $buckets = array();

    /**  @var \obiba\mica\VocabularyCoverageDto[] */
    public $vocabularies = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TaxonomyCoverageDto');

      // REQUIRED MESSAGE taxonomy = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "taxonomy";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\obiba\mica\TaxonomyEntityDto';
      $descriptor->addField($f);

      // REQUIRED INT32 hits = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "hits";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE buckets = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "buckets";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\BucketCoverageDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE vocabularies = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "vocabularies";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\VocabularyCoverageDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <taxonomy> has a value
     *
     * @return boolean
     */
    public function hasTaxonomy() {
      return $this->_has(1);
    }

    /**
     * Clear <taxonomy> value
     *
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function clearTaxonomy() {
      return $this->_clear(1);
    }

    /**
     * Get <taxonomy> value
     *
     * @return \obiba\mica\TaxonomyEntityDto
     */
    public function getTaxonomy() {
      return $this->_get(1);
    }

    /**
     * Set <taxonomy> value
     *
     * @param \obiba\mica\TaxonomyEntityDto $value
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function setTaxonomy(\obiba\mica\TaxonomyEntityDto $value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <hits> has a value
     *
     * @return boolean
     */
    public function hasHits() {
      return $this->_has(2);
    }

    /**
     * Clear <hits> value
     *
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function clearHits() {
      return $this->_clear(2);
    }

    /**
     * Get <hits> value
     *
     * @return int
     */
    public function getHits() {
      return $this->_get(2);
    }

    /**
     * Set <hits> value
     *
     * @param int $value
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function setHits($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <buckets> has a value
     *
     * @return boolean
     */
    public function hasBuckets() {
      return $this->_has(3);
    }

    /**
     * Clear <buckets> value
     *
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function clearBuckets() {
      return $this->_clear(3);
    }

    /**
     * Get <buckets> value
     *
     * @param int $idx
     * @return \obiba\mica\BucketCoverageDto
     */
    public function getBuckets($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <buckets> value
     *
     * @param \obiba\mica\BucketCoverageDto $value
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function setBuckets(\obiba\mica\BucketCoverageDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <buckets>
     *
     * @return \obiba\mica\BucketCoverageDto[]
     */
    public function getBucketsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <buckets>
     *
     * @param \obiba\mica\BucketCoverageDto $value
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function addBuckets(\obiba\mica\BucketCoverageDto $value) {
      return $this->_add(3, $value);
    }

    /**
     * Check if <vocabularies> has a value
     *
     * @return boolean
     */
    public function hasVocabularies() {
      return $this->_has(4);
    }

    /**
     * Clear <vocabularies> value
     *
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function clearVocabularies() {
      return $this->_clear(4);
    }

    /**
     * Get <vocabularies> value
     *
     * @param int $idx
     * @return \obiba\mica\VocabularyCoverageDto
     */
    public function getVocabularies($idx = NULL) {
      return $this->_get(4, $idx);
    }

    /**
     * Set <vocabularies> value
     *
     * @param \obiba\mica\VocabularyCoverageDto $value
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function setVocabularies(\obiba\mica\VocabularyCoverageDto $value, $idx = NULL) {
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <vocabularies>
     *
     * @return \obiba\mica\VocabularyCoverageDto[]
     */
    public function getVocabulariesList() {
      return $this->_get(4);
    }

    /**
     * Add a new element to <vocabularies>
     *
     * @param \obiba\mica\VocabularyCoverageDto $value
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function addVocabularies(\obiba\mica\VocabularyCoverageDto $value) {
      return $this->_add(4, $value);
    }
  }
}

namespace obiba\mica {

  class TaxonomiesCoverageDto extends \DrSlump\Protobuf\Message {

    /**  @var \obiba\mica\TaxonomyCoverageDto[] */
    public $taxonomies = array();

    /**  @var int */
    public $totalHits = NULL;

    /**  @var int */
    public $totalCount = NULL;

    /**  @var string[] */
    public $by = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'obiba.mica.TaxonomiesCoverageDto');

      // REPEATED MESSAGE taxonomies = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "taxonomies";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\obiba\mica\TaxonomyCoverageDto';
      $descriptor->addField($f);

      // REQUIRED INT32 totalHits = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "totalHits";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT64 totalCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "totalCount";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING by = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "by";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <taxonomies> has a value
     *
     * @return boolean
     */
    public function hasTaxonomies() {
      return $this->_has(1);
    }

    /**
     * Clear <taxonomies> value
     *
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function clearTaxonomies() {
      return $this->_clear(1);
    }

    /**
     * Get <taxonomies> value
     *
     * @param int $idx
     * @return \obiba\mica\TaxonomyCoverageDto
     */
    public function getTaxonomies($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <taxonomies> value
     *
     * @param \obiba\mica\TaxonomyCoverageDto $value
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function setTaxonomies(\obiba\mica\TaxonomyCoverageDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <taxonomies>
     *
     * @return \obiba\mica\TaxonomyCoverageDto[]
     */
    public function getTaxonomiesList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <taxonomies>
     *
     * @param \obiba\mica\TaxonomyCoverageDto $value
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function addTaxonomies(\obiba\mica\TaxonomyCoverageDto $value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <totalHits> has a value
     *
     * @return boolean
     */
    public function hasTotalHits() {
      return $this->_has(2);
    }

    /**
     * Clear <totalHits> value
     *
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function clearTotalHits() {
      return $this->_clear(2);
    }

    /**
     * Get <totalHits> value
     *
     * @return int
     */
    public function getTotalHits() {
      return $this->_get(2);
    }

    /**
     * Set <totalHits> value
     *
     * @param int $value
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function setTotalHits($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <totalCount> has a value
     *
     * @return boolean
     */
    public function hasTotalCount() {
      return $this->_has(3);
    }

    /**
     * Clear <totalCount> value
     *
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function clearTotalCount() {
      return $this->_clear(3);
    }

    /**
     * Get <totalCount> value
     *
     * @return int
     */
    public function getTotalCount() {
      return $this->_get(3);
    }

    /**
     * Set <totalCount> value
     *
     * @param int $value
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function setTotalCount($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <by> has a value
     *
     * @return boolean
     */
    public function hasBy() {
      return $this->_has(4);
    }

    /**
     * Clear <by> value
     *
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function clearBy() {
      return $this->_clear(4);
    }

    /**
     * Get <by> value
     *
     * @param int $idx
     * @return string
     */
    public function getBy($idx = NULL) {
      return $this->_get(4, $idx);
    }

    /**
     * Set <by> value
     *
     * @param string $value
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function setBy($value, $idx = NULL) {
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <by>
     *
     * @return string[]
     */
    public function getByList() {
      return $this->_get(4);
    }

    /**
     * Add a new element to <by>
     *
     * @param string $value
     * @return \obiba\mica\TaxonomiesCoverageDto
     */
    public function addBy($value) {
      return $this->_add(4, $value);
    }
  }
}

namespace {
  \obiba\mica\FilterQueryDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.TermsFilterQueryDto.terms = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1000;
    $f->name = "obiba.mica.TermsFilterQueryDto.terms";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\TermsFilterQueryDto';
    return $f;
  });
  \obiba\mica\FilterQueryDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.RangeFilterQueryDto.range = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1001;
    $f->name = "obiba.mica.RangeFilterQueryDto.range";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\RangeFilterQueryDto';
    return $f;
  });
  \obiba\mica\QueryResultDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.DatasetVariableResultDto.result = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1000;
    $f->name = "obiba.mica.DatasetVariableResultDto.result";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\DatasetVariableResultDto';
    return $f;
  });
  \obiba\mica\QueryResultDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.DatasetResultDto.result = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1001;
    $f->name = "obiba.mica.DatasetResultDto.result";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\DatasetResultDto';
    return $f;
  });
  \obiba\mica\QueryResultDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.StudyResultDto.result = 1002
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1002;
    $f->name = "obiba.mica.StudyResultDto.result";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\StudyResultDto';
    return $f;
  });
  \obiba\mica\QueryResultDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.NetworkResultDto.result = 1003
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1003;
    $f->name = "obiba.mica.NetworkResultDto.result";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\NetworkResultDto';
    return $f;
  });
  \obiba\mica\QueryResultDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.StudySummariesResultDto.result = 1009
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1009;
    $f->name = "obiba.mica.StudySummariesResultDto.result";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\StudySummariesResultDto';
    return $f;
  });
  \obiba\mica\StudySummaryDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.CountStatsDto.studyCountStats = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1001;
    $f->name = "obiba.mica.CountStatsDto.studyCountStats";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\CountStatsDto';
    return $f;
  });
  \obiba\mica\DatasetDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.CountStatsDto.datasetCountStats = 1003
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1003;
    $f->name = "obiba.mica.CountStatsDto.datasetCountStats";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\CountStatsDto';
    return $f;
  });
  \obiba\mica\NetworkDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.CountStatsDto.networkCountStats = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1001;
    $f->name = "obiba.mica.CountStatsDto.networkCountStats";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\CountStatsDto';
    return $f;
  });
  \obiba\mica\AggregationResultDto::extension(function () {
    // REPEATED MESSAGE obiba.mica.TermsAggregationResultDto.terms = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1000;
    $f->name = "obiba.mica.TermsAggregationResultDto.terms";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
    $f->reference = '\obiba\mica\TermsAggregationResultDto';
    return $f;
  });
  \obiba\mica\AggregationResultDto::extension(function () {
    // OPTIONAL MESSAGE obiba.mica.StatsAggregationResultDto.stats = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1001;
    $f->name = "obiba.mica.StatsAggregationResultDto.stats";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\obiba\mica\StatsAggregationResultDto';
    return $f;
  });
}