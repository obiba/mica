<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Search.proto
//   Date: 2014-03-10 20:41:21

namespace Search {

  class TermOperator extends \DrSlump\Protobuf\Enum {
    const AND_OP = 0;
    const OR_OP = 1;
  }
}
namespace Search {

  class QueryTermsDto extends \DrSlump\Protobuf\Message {

    /**  @var \Search\QueryTermDto[] */
    public $queries = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.QueryTermsDto');

      // REPEATED MESSAGE queries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "queries";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Search\QueryTermDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <queries> has a value
     *
     * @return boolean
     */
    public function hasQueries() {
      return $this->_has(1);
    }

    /**
     * Clear <queries> value
     *
     * @return \Search\QueryTermsDto
     */
    public function clearQueries() {
      return $this->_clear(1);
    }

    /**
     * Get <queries> value
     *
     * @param int $idx
     * @return \Search\QueryTermDto
     */
    public function getQueries($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <queries> value
     *
     * @param \Search\QueryTermDto $value
     * @return \Search\QueryTermsDto
     */
    public function setQueries(\Search\QueryTermDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <queries>
     *
     * @return \Search\QueryTermDto[]
     */
    public function getQueriesList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <queries>
     *
     * @param \Search\QueryTermDto $value
     * @return \Search\QueryTermsDto
     */
    public function addQueries(\Search\QueryTermDto $value) {
      return $this->_add(1, $value);
    }
  }
}

namespace Search {

  class QueryTermDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $global = NULL;

    /**  @var string */
    public $facet = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.QueryTermDto');

      // OPTIONAL BOOL global = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "global";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING facet = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "facet";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <global> has a value
     *
     * @return boolean
     */
    public function hasGlobal() {
      return $this->_has(1);
    }

    /**
     * Clear <global> value
     *
     * @return \Search\QueryTermDto
     */
    public function clearGlobal() {
      return $this->_clear(1);
    }

    /**
     * Get <global> value
     *
     * @return boolean
     */
    public function getGlobal() {
      return $this->_get(1);
    }

    /**
     * Set <global> value
     *
     * @param boolean $value
     * @return \Search\QueryTermDto
     */
    public function setGlobal($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <facet> has a value
     *
     * @return boolean
     */
    public function hasFacet() {
      return $this->_has(2);
    }

    /**
     * Clear <facet> value
     *
     * @return \Search\QueryTermDto
     */
    public function clearFacet() {
      return $this->_clear(2);
    }

    /**
     * Get <facet> value
     *
     * @return string
     */
    public function getFacet() {
      return $this->_get(2);
    }

    /**
     * Set <facet> value
     *
     * @param string $value
     * @return \Search\QueryTermDto
     */
    public function setFacet($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Search {

  class VariableTermDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variable = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.VariableTermDto');

      // REQUIRED STRING variable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "variable";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <variable> has a value
     *
     * @return boolean
     */
    public function hasVariable() {
      return $this->_has(1);
    }

    /**
     * Clear <variable> value
     *
     * @return \Search\VariableTermDto
     */
    public function clearVariable() {
      return $this->_clear(1);
    }

    /**
     * Get <variable> value
     *
     * @return string
     */
    public function getVariable() {
      return $this->_get(1);
    }

    /**
     * Set <variable> value
     *
     * @param string $value
     * @return \Search\VariableTermDto
     */
    public function setVariable($value) {
      return $this->_set(1, $value);
    }
  }
}

namespace Search {

  class FilterDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variable = NULL;

    /**  @var boolean */
    public $not = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FilterDto');

      // REQUIRED STRING variable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "variable";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BOOL not = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "not";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <variable> has a value
     *
     * @return boolean
     */
    public function hasVariable() {
      return $this->_has(1);
    }

    /**
     * Clear <variable> value
     *
     * @return \Search\FilterDto
     */
    public function clearVariable() {
      return $this->_clear(1);
    }

    /**
     * Get <variable> value
     *
     * @return string
     */
    public function getVariable() {
      return $this->_get(1);
    }

    /**
     * Set <variable> value
     *
     * @param string $value
     * @return \Search\FilterDto
     */
    public function setVariable($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <not> has a value
     *
     * @return boolean
     */
    public function hasNot() {
      return $this->_has(2);
    }

    /**
     * Clear <not> value
     *
     * @return \Search\FilterDto
     */
    public function clearNot() {
      return $this->_clear(2);
    }

    /**
     * Get <not> value
     *
     * @return boolean
     */
    public function getNot() {
      return $this->_get(2);
    }

    /**
     * Set <not> value
     *
     * @param boolean $value
     * @return \Search\FilterDto
     */
    public function setNot($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Search {

  class LogicalTermDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \Search\TermOperator */
    public $operator = \Search\TermOperator::AND_OP;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.LogicalTermDto');

      // REQUIRED ENUM operator = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "operator";
      $f->type = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Search\TermOperator';
      $f->default = \Search\TermOperator::AND_OP;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator() {
      return $this->_has(1);
    }

    /**
     * Clear <operator> value
     *
     * @return \Search\LogicalTermDto
     */
    public function clearOperator() {
      return $this->_clear(1);
    }

    /**
     * Get <operator> value
     *
     * @return int - \Search\TermOperator
     */
    public function getOperator() {
      return $this->_get(1);
    }

    /**
     * Set <operator> value
     *
     * @param int - \Search\TermOperator $value
     * @return \Search\LogicalTermDto
     */
    public function setOperator($value) {
      return $this->_set(1, $value);
    }
  }
}

namespace Search {

  class InTermDto extends \DrSlump\Protobuf\Message {

    /**  @var string[] */
    public $values = array();

    /**  @var int */
    public $minimumMatch = 1;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.InTermDto');

      // REPEATED STRING values = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "values";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 minimumMatch = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "minimumMatch";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default = 1;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues() {
      return $this->_has(1);
    }

    /**
     * Clear <values> value
     *
     * @return \Search\InTermDto
     */
    public function clearValues() {
      return $this->_clear(1);
    }

    /**
     * Get <values> value
     *
     * @param int $idx
     * @return string
     */
    public function getValues($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <values> value
     *
     * @param string $value
     * @return \Search\InTermDto
     */
    public function setValues($value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <values>
     *
     * @return string[]
     */
    public function getValuesList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <values>
     *
     * @param string $value
     * @return \Search\InTermDto
     */
    public function addValues($value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <minimumMatch> has a value
     *
     * @return boolean
     */
    public function hasMinimumMatch() {
      return $this->_has(2);
    }

    /**
     * Clear <minimumMatch> value
     *
     * @return \Search\InTermDto
     */
    public function clearMinimumMatch() {
      return $this->_clear(2);
    }

    /**
     * Get <minimumMatch> value
     *
     * @return int
     */
    public function getMinimumMatch() {
      return $this->_get(2);
    }

    /**
     * Set <minimumMatch> value
     *
     * @param int $value
     * @return \Search\InTermDto
     */
    public function setMinimumMatch($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Search {

  class RangeTermDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $from = NULL;

    /**  @var string */
    public $to = NULL;

    /**  @var boolean */
    public $includeLower = TRUE;

    /**  @var boolean */
    public $includeUpper = FALSE;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.RangeTermDto');

      // OPTIONAL STRING from = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "from";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING to = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "to";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL includeLower = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "includeLower";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default = TRUE;
      $descriptor->addField($f);

      // OPTIONAL BOOL includeUpper = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "includeUpper";
      $f->type = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default = FALSE;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom() {
      return $this->_has(1);
    }

    /**
     * Clear <from> value
     *
     * @return \Search\RangeTermDto
     */
    public function clearFrom() {
      return $this->_clear(1);
    }

    /**
     * Get <from> value
     *
     * @return string
     */
    public function getFrom() {
      return $this->_get(1);
    }

    /**
     * Set <from> value
     *
     * @param string $value
     * @return \Search\RangeTermDto
     */
    public function setFrom($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <to> has a value
     *
     * @return boolean
     */
    public function hasTo() {
      return $this->_has(2);
    }

    /**
     * Clear <to> value
     *
     * @return \Search\RangeTermDto
     */
    public function clearTo() {
      return $this->_clear(2);
    }

    /**
     * Get <to> value
     *
     * @return string
     */
    public function getTo() {
      return $this->_get(2);
    }

    /**
     * Set <to> value
     *
     * @param string $value
     * @return \Search\RangeTermDto
     */
    public function setTo($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <includeLower> has a value
     *
     * @return boolean
     */
    public function hasIncludeLower() {
      return $this->_has(3);
    }

    /**
     * Clear <includeLower> value
     *
     * @return \Search\RangeTermDto
     */
    public function clearIncludeLower() {
      return $this->_clear(3);
    }

    /**
     * Get <includeLower> value
     *
     * @return boolean
     */
    public function getIncludeLower() {
      return $this->_get(3);
    }

    /**
     * Set <includeLower> value
     *
     * @param boolean $value
     * @return \Search\RangeTermDto
     */
    public function setIncludeLower($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <includeUpper> has a value
     *
     * @return boolean
     */
    public function hasIncludeUpper() {
      return $this->_has(4);
    }

    /**
     * Clear <includeUpper> value
     *
     * @return \Search\RangeTermDto
     */
    public function clearIncludeUpper() {
      return $this->_clear(4);
    }

    /**
     * Get <includeUpper> value
     *
     * @return boolean
     */
    public function getIncludeUpper() {
      return $this->_get(4);
    }

    /**
     * Set <includeUpper> value
     *
     * @param boolean $value
     * @return \Search\RangeTermDto
     */
    public function setIncludeUpper($value) {
      return $this->_set(4, $value);
    }
  }
}

namespace Search {

  class QueryResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \Search\FacetResultDto[] */
    public $facets = array();

    /**  @var int */
    public $totalHits = NULL;

    /**  @var \Search\ItemResultDto[] */
    public $hits = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.QueryResultDto');

      // REPEATED MESSAGE facets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "facets";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Search\FacetResultDto';
      $descriptor->addField($f);

      // REQUIRED INT32 totalHits = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "totalHits";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE hits = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "hits";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Search\ItemResultDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <facets> has a value
     *
     * @return boolean
     */
    public function hasFacets() {
      return $this->_has(1);
    }

    /**
     * Clear <facets> value
     *
     * @return \Search\QueryResultDto
     */
    public function clearFacets() {
      return $this->_clear(1);
    }

    /**
     * Get <facets> value
     *
     * @param int $idx
     * @return \Search\FacetResultDto
     */
    public function getFacets($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <facets> value
     *
     * @param \Search\FacetResultDto $value
     * @return \Search\QueryResultDto
     */
    public function setFacets(\Search\FacetResultDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <facets>
     *
     * @return \Search\FacetResultDto[]
     */
    public function getFacetsList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <facets>
     *
     * @param \Search\FacetResultDto $value
     * @return \Search\QueryResultDto
     */
    public function addFacets(\Search\FacetResultDto $value) {
      return $this->_add(1, $value);
    }

    /**
     * Check if <totalHits> has a value
     *
     * @return boolean
     */
    public function hasTotalHits() {
      return $this->_has(2);
    }

    /**
     * Clear <totalHits> value
     *
     * @return \Search\QueryResultDto
     */
    public function clearTotalHits() {
      return $this->_clear(2);
    }

    /**
     * Get <totalHits> value
     *
     * @return int
     */
    public function getTotalHits() {
      return $this->_get(2);
    }

    /**
     * Set <totalHits> value
     *
     * @param int $value
     * @return \Search\QueryResultDto
     */
    public function setTotalHits($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <hits> has a value
     *
     * @return boolean
     */
    public function hasHits() {
      return $this->_has(3);
    }

    /**
     * Clear <hits> value
     *
     * @return \Search\QueryResultDto
     */
    public function clearHits() {
      return $this->_clear(3);
    }

    /**
     * Get <hits> value
     *
     * @param int $idx
     * @return \Search\ItemResultDto
     */
    public function getHits($idx = NULL) {
      return $this->_get(3, $idx);
    }

    /**
     * Set <hits> value
     *
     * @param \Search\ItemResultDto $value
     * @return \Search\QueryResultDto
     */
    public function setHits(\Search\ItemResultDto $value, $idx = NULL) {
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <hits>
     *
     * @return \Search\ItemResultDto[]
     */
    public function getHitsList() {
      return $this->_get(3);
    }

    /**
     * Add a new element to <hits>
     *
     * @param \Search\ItemResultDto $value
     * @return \Search\QueryResultDto
     */
    public function addHits(\Search\ItemResultDto $value) {
      return $this->_add(3, $value);
    }
  }
}

namespace Search\FacetResultDto {

  class FilterResultDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $count = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FacetResultDto.FilterResultDto');

      // REQUIRED INT32 count = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "count";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount() {
      return $this->_has(1);
    }

    /**
     * Clear <count> value
     *
     * @return \Search\FacetResultDto\FilterResultDto
     */
    public function clearCount() {
      return $this->_clear(1);
    }

    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount() {
      return $this->_get(1);
    }

    /**
     * Set <count> value
     *
     * @param int $value
     * @return \Search\FacetResultDto\FilterResultDto
     */
    public function setCount($value) {
      return $this->_set(1, $value);
    }
  }
}

namespace Search\FacetResultDto {

  class TermFrequencyResultDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $term = NULL;

    /**  @var int */
    public $count = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FacetResultDto.TermFrequencyResultDto');

      // REQUIRED STRING term = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "term";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "count";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <term> has a value
     *
     * @return boolean
     */
    public function hasTerm() {
      return $this->_has(1);
    }

    /**
     * Clear <term> value
     *
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function clearTerm() {
      return $this->_clear(1);
    }

    /**
     * Get <term> value
     *
     * @return string
     */
    public function getTerm() {
      return $this->_get(1);
    }

    /**
     * Set <term> value
     *
     * @param string $value
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function setTerm($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount() {
      return $this->_has(2);
    }

    /**
     * Clear <count> value
     *
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function clearCount() {
      return $this->_clear(2);
    }

    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount() {
      return $this->_get(2);
    }

    /**
     * Set <count> value
     *
     * @param int $value
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function setCount($value) {
      return $this->_set(2, $value);
    }
  }
}

namespace Search\FacetResultDto {

  class StatisticalResultDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $count = 0;

    /**  @var float */
    public $total = NULL;

    /**  @var float */
    public $min = NULL;

    /**  @var float */
    public $max = NULL;

    /**  @var float */
    public $mean = NULL;

    /**  @var float */
    public $sumOfSquares = NULL;

    /**  @var float */
    public $variance = NULL;

    /**  @var float */
    public $stdDeviation = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FacetResultDto.StatisticalResultDto');

      // REQUIRED INT64 count = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "count";
      $f->type = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT total = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "total";
      $f->type = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT min = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "min";
      $f->type = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT max = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "max";
      $f->type = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT mean = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 5;
      $f->name = "mean";
      $f->type = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT sumOfSquares = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 6;
      $f->name = "sumOfSquares";
      $f->type = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT variance = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 7;
      $f->name = "variance";
      $f->type = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT stdDeviation = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 8;
      $f->name = "stdDeviation";
      $f->type = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount() {
      return $this->_has(1);
    }

    /**
     * Clear <count> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearCount() {
      return $this->_clear(1);
    }

    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount() {
      return $this->_get(1);
    }

    /**
     * Set <count> value
     *
     * @param int $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setCount($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal() {
      return $this->_has(2);
    }

    /**
     * Clear <total> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearTotal() {
      return $this->_clear(2);
    }

    /**
     * Get <total> value
     *
     * @return float
     */
    public function getTotal() {
      return $this->_get(2);
    }

    /**
     * Set <total> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setTotal($value) {
      return $this->_set(2, $value);
    }

    /**
     * Check if <min> has a value
     *
     * @return boolean
     */
    public function hasMin() {
      return $this->_has(3);
    }

    /**
     * Clear <min> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearMin() {
      return $this->_clear(3);
    }

    /**
     * Get <min> value
     *
     * @return float
     */
    public function getMin() {
      return $this->_get(3);
    }

    /**
     * Set <min> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setMin($value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <max> has a value
     *
     * @return boolean
     */
    public function hasMax() {
      return $this->_has(4);
    }

    /**
     * Clear <max> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearMax() {
      return $this->_clear(4);
    }

    /**
     * Get <max> value
     *
     * @return float
     */
    public function getMax() {
      return $this->_get(4);
    }

    /**
     * Set <max> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setMax($value) {
      return $this->_set(4, $value);
    }

    /**
     * Check if <mean> has a value
     *
     * @return boolean
     */
    public function hasMean() {
      return $this->_has(5);
    }

    /**
     * Clear <mean> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearMean() {
      return $this->_clear(5);
    }

    /**
     * Get <mean> value
     *
     * @return float
     */
    public function getMean() {
      return $this->_get(5);
    }

    /**
     * Set <mean> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setMean($value) {
      return $this->_set(5, $value);
    }

    /**
     * Check if <sumOfSquares> has a value
     *
     * @return boolean
     */
    public function hasSumOfSquares() {
      return $this->_has(6);
    }

    /**
     * Clear <sumOfSquares> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearSumOfSquares() {
      return $this->_clear(6);
    }

    /**
     * Get <sumOfSquares> value
     *
     * @return float
     */
    public function getSumOfSquares() {
      return $this->_get(6);
    }

    /**
     * Set <sumOfSquares> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setSumOfSquares($value) {
      return $this->_set(6, $value);
    }

    /**
     * Check if <variance> has a value
     *
     * @return boolean
     */
    public function hasVariance() {
      return $this->_has(7);
    }

    /**
     * Clear <variance> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearVariance() {
      return $this->_clear(7);
    }

    /**
     * Get <variance> value
     *
     * @return float
     */
    public function getVariance() {
      return $this->_get(7);
    }

    /**
     * Set <variance> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setVariance($value) {
      return $this->_set(7, $value);
    }

    /**
     * Check if <stdDeviation> has a value
     *
     * @return boolean
     */
    public function hasStdDeviation() {
      return $this->_has(8);
    }

    /**
     * Clear <stdDeviation> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearStdDeviation() {
      return $this->_clear(8);
    }

    /**
     * Get <stdDeviation> value
     *
     * @return float
     */
    public function getStdDeviation() {
      return $this->_get(8);
    }

    /**
     * Set <stdDeviation> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setStdDeviation($value) {
      return $this->_set(8, $value);
    }
  }
}

namespace Search {

  class FacetResultDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $facet = NULL;

    /**  @var \Search\FacetResultDto\TermFrequencyResultDto[] */
    public $frequencies = array();

    /**  @var \Search\FacetResultDto\StatisticalResultDto */
    public $statistics = NULL;

    /**  @var \Search\FacetResultDto\FilterResultDto[] */
    public $filters = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FacetResultDto');

      // REQUIRED STRING facet = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "facet";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE frequencies = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "frequencies";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Search\FacetResultDto\TermFrequencyResultDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE statistics = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 3;
      $f->name = "statistics";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Search\FacetResultDto\StatisticalResultDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE filters = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 4;
      $f->name = "filters";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Search\FacetResultDto\FilterResultDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <facet> has a value
     *
     * @return boolean
     */
    public function hasFacet() {
      return $this->_has(1);
    }

    /**
     * Clear <facet> value
     *
     * @return \Search\FacetResultDto
     */
    public function clearFacet() {
      return $this->_clear(1);
    }

    /**
     * Get <facet> value
     *
     * @return string
     */
    public function getFacet() {
      return $this->_get(1);
    }

    /**
     * Set <facet> value
     *
     * @param string $value
     * @return \Search\FacetResultDto
     */
    public function setFacet($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <frequencies> has a value
     *
     * @return boolean
     */
    public function hasFrequencies() {
      return $this->_has(2);
    }

    /**
     * Clear <frequencies> value
     *
     * @return \Search\FacetResultDto
     */
    public function clearFrequencies() {
      return $this->_clear(2);
    }

    /**
     * Get <frequencies> value
     *
     * @param int $idx
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function getFrequencies($idx = NULL) {
      return $this->_get(2, $idx);
    }

    /**
     * Set <frequencies> value
     *
     * @param \Search\FacetResultDto\TermFrequencyResultDto $value
     * @return \Search\FacetResultDto
     */
    public function setFrequencies(\Search\FacetResultDto\TermFrequencyResultDto $value, $idx = NULL) {
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <frequencies>
     *
     * @return \Search\FacetResultDto\TermFrequencyResultDto[]
     */
    public function getFrequenciesList() {
      return $this->_get(2);
    }

    /**
     * Add a new element to <frequencies>
     *
     * @param \Search\FacetResultDto\TermFrequencyResultDto $value
     * @return \Search\FacetResultDto
     */
    public function addFrequencies(\Search\FacetResultDto\TermFrequencyResultDto $value) {
      return $this->_add(2, $value);
    }

    /**
     * Check if <statistics> has a value
     *
     * @return boolean
     */
    public function hasStatistics() {
      return $this->_has(3);
    }

    /**
     * Clear <statistics> value
     *
     * @return \Search\FacetResultDto
     */
    public function clearStatistics() {
      return $this->_clear(3);
    }

    /**
     * Get <statistics> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function getStatistics() {
      return $this->_get(3);
    }

    /**
     * Set <statistics> value
     *
     * @param \Search\FacetResultDto\StatisticalResultDto $value
     * @return \Search\FacetResultDto
     */
    public function setStatistics(\Search\FacetResultDto\StatisticalResultDto $value) {
      return $this->_set(3, $value);
    }

    /**
     * Check if <filters> has a value
     *
     * @return boolean
     */
    public function hasFilters() {
      return $this->_has(4);
    }

    /**
     * Clear <filters> value
     *
     * @return \Search\FacetResultDto
     */
    public function clearFilters() {
      return $this->_clear(4);
    }

    /**
     * Get <filters> value
     *
     * @param int $idx
     * @return \Search\FacetResultDto\FilterResultDto
     */
    public function getFilters($idx = NULL) {
      return $this->_get(4, $idx);
    }

    /**
     * Set <filters> value
     *
     * @param \Search\FacetResultDto\FilterResultDto $value
     * @return \Search\FacetResultDto
     */
    public function setFilters(\Search\FacetResultDto\FilterResultDto $value, $idx = NULL) {
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <filters>
     *
     * @return \Search\FacetResultDto\FilterResultDto[]
     */
    public function getFiltersList() {
      return $this->_get(4);
    }

    /**
     * Add a new element to <filters>
     *
     * @param \Search\FacetResultDto\FilterResultDto $value
     * @return \Search\FacetResultDto
     */
    public function addFilters(\Search\FacetResultDto\FilterResultDto $value) {
      return $this->_add(4, $value);
    }
  }
}

namespace Search {

  class ItemResultDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $identifier = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.ItemResultDto');

      // REQUIRED STRING identifier = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "identifier";
      $f->type = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <identifier> has a value
     *
     * @return boolean
     */
    public function hasIdentifier() {
      return $this->_has(1);
    }

    /**
     * Clear <identifier> value
     *
     * @return \Search\ItemResultDto
     */
    public function clearIdentifier() {
      return $this->_clear(1);
    }

    /**
     * Get <identifier> value
     *
     * @return string
     */
    public function getIdentifier() {
      return $this->_get(1);
    }

    /**
     * Set <identifier> value
     *
     * @param string $value
     * @return \Search\ItemResultDto
     */
    public function setIdentifier($value) {
      return $this->_set(1, $value);
    }
  }
}

namespace Search {

  class ItemFieldsDto extends \DrSlump\Protobuf\Message {

    /**  @var \Opal\EntryDto[] */
    public $fields = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.ItemFieldsDto');

      // REPEATED MESSAGE fields = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "fields";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Opal\EntryDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <fields> has a value
     *
     * @return boolean
     */
    public function hasFields() {
      return $this->_has(1);
    }

    /**
     * Clear <fields> value
     *
     * @return \Search\ItemFieldsDto
     */
    public function clearFields() {
      return $this->_clear(1);
    }

    /**
     * Get <fields> value
     *
     * @param int $idx
     * @return \Opal\EntryDto
     */
    public function getFields($idx = NULL) {
      return $this->_get(1, $idx);
    }

    /**
     * Set <fields> value
     *
     * @param \Opal\EntryDto $value
     * @return \Search\ItemFieldsDto
     */
    public function setFields(\Opal\EntryDto $value, $idx = NULL) {
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <fields>
     *
     * @return \Opal\EntryDto[]
     */
    public function getFieldsList() {
      return $this->_get(1);
    }

    /**
     * Add a new element to <fields>
     *
     * @param \Opal\EntryDto $value
     * @return \Search\ItemFieldsDto
     */
    public function addFields(\Opal\EntryDto $value) {
      return $this->_add(1, $value);
    }
  }
}

namespace Search {

  class VariableItemDto extends \DrSlump\Protobuf\Message {

    /**  @var \Magma\VariableDto */
    public $variable = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.VariableItemDto');

      // REQUIRED MESSAGE variable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "variable";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Magma\VariableDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <variable> has a value
     *
     * @return boolean
     */
    public function hasVariable() {
      return $this->_has(1);
    }

    /**
     * Clear <variable> value
     *
     * @return \Search\VariableItemDto
     */
    public function clearVariable() {
      return $this->_clear(1);
    }

    /**
     * Get <variable> value
     *
     * @return \Magma\VariableDto
     */
    public function getVariable() {
      return $this->_get(1);
    }

    /**
     * Set <variable> value
     *
     * @param \Magma\VariableDto $value
     * @return \Search\VariableItemDto
     */
    public function setVariable(\Magma\VariableDto $value) {
      return $this->_set(1, $value);
    }
  }
}

namespace Search {

  class ValueSetsResultDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $totalHits = NULL;

    /**  @var \Magma\ValueSetsDto */
    public $valueSets = NULL;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor() {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.ValueSetsResultDto');

      // REQUIRED INT32 totalHits = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 1;
      $f->name = "totalHits";
      $f->type = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valueSets = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number = 2;
      $f->name = "valueSets";
      $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Magma\ValueSetsDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), TRUE);
      }

      return $descriptor;
    }

    /**
     * Check if <totalHits> has a value
     *
     * @return boolean
     */
    public function hasTotalHits() {
      return $this->_has(1);
    }

    /**
     * Clear <totalHits> value
     *
     * @return \Search\ValueSetsResultDto
     */
    public function clearTotalHits() {
      return $this->_clear(1);
    }

    /**
     * Get <totalHits> value
     *
     * @return int
     */
    public function getTotalHits() {
      return $this->_get(1);
    }

    /**
     * Set <totalHits> value
     *
     * @param int $value
     * @return \Search\ValueSetsResultDto
     */
    public function setTotalHits($value) {
      return $this->_set(1, $value);
    }

    /**
     * Check if <valueSets> has a value
     *
     * @return boolean
     */
    public function hasValueSets() {
      return $this->_has(2);
    }

    /**
     * Clear <valueSets> value
     *
     * @return \Search\ValueSetsResultDto
     */
    public function clearValueSets() {
      return $this->_clear(2);
    }

    /**
     * Get <valueSets> value
     *
     * @return \Magma\ValueSetsDto
     */
    public function getValueSets() {
      return $this->_get(2);
    }

    /**
     * Set <valueSets> value
     *
     * @param \Magma\ValueSetsDto $value
     * @return \Search\ValueSetsResultDto
     */
    public function setValueSets(\Magma\ValueSetsDto $value) {
      return $this->_set(2, $value);
    }
  }
}

namespace {
  \Search\QueryTermDto::extension(function () {
    // OPTIONAL MESSAGE Search.VariableTermDto.field = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1001;
    $f->name = "Search.VariableTermDto.field";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\VariableTermDto';
    return $f;
  });
  \Search\QueryTermDto::extension(function () {
    // OPTIONAL MESSAGE Search.LogicalTermDto.filter = 3000
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 3000;
    $f->name = "Search.LogicalTermDto.filter";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\LogicalTermDto';
    return $f;
  });
  \Search\QueryTermDto::extension(function () {
    // OPTIONAL MESSAGE Search.LogicalTermDto.facetFilter = 3001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 3001;
    $f->name = "Search.LogicalTermDto.facetFilter";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\LogicalTermDto';
    return $f;
  });
  \Search\LogicalTermDto::extension(function () {
    // REPEATED MESSAGE Search.FilterDto.filters = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1001;
    $f->name = "Search.FilterDto.filters";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_REPEATED;
    $f->reference = '\Search\FilterDto';
    return $f;
  });
  \Search\FilterDto::extension(function () {
    // OPTIONAL MESSAGE Search.InTermDto.terms = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1000;
    $f->name = "Search.InTermDto.terms";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\InTermDto';
    return $f;
  });
  \Search\FilterDto::extension(function () {
    // OPTIONAL MESSAGE Search.RangeTermDto.range = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1001;
    $f->name = "Search.RangeTermDto.range";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\RangeTermDto';
    return $f;
  });
  \Search\ItemResultDto::extension(function () {
    // OPTIONAL MESSAGE Search.ItemFieldsDto.item = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1000;
    $f->name = "Search.ItemFieldsDto.item";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\ItemFieldsDto';
    return $f;
  });
  \Search\ItemResultDto::extension(function () {
    // OPTIONAL MESSAGE Search.VariableItemDto.item = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number = 1001;
    $f->name = "Search.VariableItemDto.item";
    $f->type = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\VariableItemDto';
    return $f;
  });
}